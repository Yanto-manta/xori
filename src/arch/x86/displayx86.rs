//displayx86.rs
use arch::x86::archx86::*;
use arch::x86::prefixx86::*;
use arch::x86::opcodex86::*;
use arch::x86::disasmtablesx86::*;
use arch::x86::registersx86::*;
use arch::x86::instructionsx86::*;
use disasm::*;
use std::fmt::Debug;

pub const DISASMX86_REG_MAP: [&'static str; 234] = [
    "",
    "ah",
    "al",
    "ax",
    "bh",
    "bl",
    "bp",
    "bpl",
    "bx",
    "ch",
    "cl",
    "cs",
    "cx",
    "dh",
    "di",
    "dil",
    "dl",
    "ds",
    "dx",
    "eax",
    "ebp",
    "ebx",
    "ecx",
    "edi",
    "edx",
    "flags",
    "eip",
    "eiz",
    "es",
    "esi",
    "esp",
    "fpsw",
    "fs",
    "gs",
    "ip",
    "rax",
    "rbp",
    "rbx",
    "rcx",
    "rdi",
    "rdx",
    "rip",
    "riz",
    "rsi",
    "rsp",
    "si",
    "sil",
    "sp",
    "spl",
    "ss",
    "cr0",
    "cr1",
    "cr2",
    "cr3",
    "cr4",
    "cr5",
    "cr6",
    "cr7",
    "cr8",
    "cr9",
    "cr10",
    "cr11",
    "cr12",
    "cr13",
    "cr14",
    "cr15",
    "dr0",
    "dr1",
    "dr2",
    "dr3",
    "dr4",
    "dr5",
    "dr6",
    "dr7",
    "fp0",
    "fp1",
    "fp2",
    "fp3",
    "fp4",
    "fp5",
    "fp6",
    "fp7",
    "k0",
    "k1",
    "k2",
    "k3",
    "k4",
    "k5",
    "k6",
    "k7",
    "mm0",
    "mm1",
    "mm2",
    "mm3",
    "mm4",
    "mm5",
    "mm6",
    "mm7",
    "r8",
    "r9",
    "r10",
    "r11",
    "r12",
    "r13",
    "r14",
    "r15",
    "st(0",
    "st(1)",
    "st(2)",
    "st(3)",
    "st(4)",
    "st(5)",
    "st(6)",
    "st(7)",
    "xmm0",
    "xmm1",
    "xmm2",
    "xmm3",
    "xmm4",
    "xmm5",
    "xmm6",
    "xmm7",
    "xmm8",
    "xmm9",
    "xmm10",
    "xmm11",
    "xmm12",
    "xmm13",
    "xmm14",
    "xmm15",
    "xmm16",
    "xmm17",
    "xmm18",
    "xmm19",
    "xmm20",
    "xmm21",
    "xmm22",
    "xmm23",
    "xmm24",
    "xmm25",
    "xmm26",
    "xmm27",
    "xmm28",
    "xmm29",
    "xmm30",
    "xmm31",
    "ymm0",
    "ymm1",
    "ymm2",
    "ymm3",
    "ymm4",
    "ymm5",
    "ymm6",
    "ymm7",
    "ymm8",
    "ymm9",
    "ymm10",
    "ymm11",
    "ymm12",
    "ymm13",
    "ymm14",
    "ymm15",
    "ymm16",
    "ymm17",
    "ymm18",
    "ymm19",
    "ymm20",
    "ymm21",
    "ymm22",
    "ymm23",
    "ymm24",
    "ymm25",
    "ymm26",
    "ymm27",
    "ymm28",
    "ymm29",
    "ymm30",
    "ymm31",
    "zmm0",
    "zmm1",
    "zmm2",
    "zmm3",
    "zmm4",
    "zmm5",
    "zmm6",
    "zmm7",
    "zmm8",
    "zmm9",
    "zmm10",
    "zmm11",
    "zmm12",
    "zmm13",
    "zmm14",
    "zmm15",
    "zmm16",
    "zmm17",
    "zmm18",
    "zmm19",
    "zmm20",
    "zmm21",
    "zmm22",
    "zmm23",
    "zmm24",
    "zmm25",
    "zmm26",
    "zmm27",
    "zmm28",
    "zmm29",
    "zmm30",
    "zmm31",
    "r8b",
    "r9b",
    "r10b",
    "r11b",
    "r12b",
    "r13b",
    "r14b",
    "r15b",
    "r8d",
    "r9d",
    "r10d",
    "r11d",
    "r12d",
    "r13d",
    "r14d",
    "r15d",
    "r8w",
    "r9w",
    "r10w",
    "r11w",
    "r12w",
    "r13w",
    "r14w",
    "r15w",
];

pub const DISASMX86_OP_MAP: [&'static str; 1296] = [
    "",
    "aaa",
    "aad",
    "aam",
    "aas",
    "fabs",
    "adc",
    "adcx",
    "add",
    "addpd",
    "addps",
    "addsd",
    "addss",
    "addsubpd",
    "addsubps",
    "fadd",
    "fiadd",
    "faddp",
    "adox",
    "aesdeclast",
    "aesdec",
    "aesenclast",
    "aesenc",
    "aesimc",
    "aeskeygenassist",
    "and",
    "andn",
    "andnpd",
    "andnps",
    "andpd",
    "andps",
    "arpl",
    "bextr",
    "blcfill",
    "blci",
    "blcic",
    "blcmsk",
    "blcs",
    "blendpd",
    "blendps",
    "blendvpd",
    "blendvps",
    "blsfill",
    "blsi",
    "blsic",
    "blsmsk",
    "blsr",
    "bound",
    "bsf",
    "bsr",
    "bswap",
    "bt",
    "btc",
    "btr",
    "bts",
    "bzhi",
    "call",
    "cbw",
    "cdq",
    "cdqe",
    "fchs",
    "clac",
    "clc",
    "cld",
    "clflush",
    "clgi",
    "cli",
    "clts",
    "cmc",
    "cmova",
    "cmovae",
    "cmovb",
    "cmovbe",
    "fcmovbe",
    "fcmovb",
    "cmove",
    "fcmove",
    "cmovg",
    "cmovge",
    "cmovl",
    "cmovle",
    "fcmovnbe",
    "fcmovnb",
    "cmovne",
    "fcmovne",
    "cmovno",
    "cmovnp",
    "fcmovnu",
    "cmovns",
    "cmovo",
    "cmovp",
    "fcmovu",
    "cmovs",
    "cmp",
    "cmppd",
    "cmpps",
    "cmpsb",
    "cmpsd",
    "cmpsq",
    "cmpss",
    "cmpsw",
    "cmpxchg16b",
    "cmpxchg",
    "cmpxchg8b",
    "comisd",
    "comiss",
    "fcomp",
    "fcompi",
    "fcomi",
    "fcom",
    "fcos",
    "cpuid",
    "cqo",
    "crc32",
    "cvtdq2pd",
    "cvtdq2ps",
    "cvtpd2dq",
    "cvtpd2ps",
    "cvtps2dq",
    "cvtps2pd",
    "cvtsd2si",
    "cvtsd2ss",
    "cvtsi2sd",
    "cvtsi2ss",
    "cvtss2sd",
    "cvtss2si",
    "cvttpd2dq",
    "cvttps2dq",
    "cvttsd2si",
    "cvttss2si",
    "cwd",
    "cwde",
    "daa",
    "das",
    "data16",
    "dec",
    "div",
    "divpd",
    "divps",
    "fdivr",
    "fidivr",
    "fdivrp",
    "divsd",
    "divss",
    "fdiv",
    "fidiv",
    "fdivp",
    "dppd",
    "dpps",
    "ret",
    "encls",
    "enclu",
    "enter",
    "extractps",
    "extrq",
    "f2xm1",
    "lcall",
    "ljmp",
    "fbld",
    "fbstp",
    "fcompp",
    "fdecstp",
    "femms",
    "ffree",
    "ficom",
    "ficomp",
    "fincstp",
    "fldcw",
    "fldenv",
    "fldl2e",
    "fldl2t",
    "fldlg2",
    "fldln2",
    "fldpi",
    "fnclex",
    "fninit",
    "fnop",
    "fnstcw",
    "fnstsw",
    "fpatan",
    "fprem",
    "fprem1",
    "fptan",
    "frndint",
    "frstor",
    "fnsave",
    "fscale",
    "fsetpm",
    "fsincos",
    "fnstenv",
    "fxam",
    "fxrstor",
    "fxrstor64",
    "fxsave",
    "fxsave64",
    "fxtract",
    "fyl2x",
    "fyl2xp1",
    "movapd",
    "movaps",
    "orpd",
    "orps",
    "vmovapd",
    "vmovaps",
    "xorpd",
    "xorps",
    "getsec",
    "haddpd",
    "haddps",
    "hlt",
    "hsubpd",
    "hsubps",
    "idiv",
    "fild",
    "imul",
    "in",
    "inc",
    "insb",
    "insertps",
    "insertq",
    "insd",
    "insw",
    "int",
    "int1",
    "int3",
    "into",
    "invd",
    "invept",
    "invlpg",
    "invlpga",
    "invpcid",
    "invvpid",
    "iret",
    "iretd",
    "iretq",
    "fisttp",
    "fist",
    "fistp",
    "ucomisd",
    "ucomiss",
    "vcmp",
    "vcomisd",
    "vcomiss",
    "vcvtsd2ss",
    "vcvtsi2sd",
    "vcvtsi2ss",
    "vcvtss2sd",
    "vcvttsd2si",
    "vcvttsd2usi",
    "vcvttss2si",
    "vcvttss2usi",
    "vcvtusi2sd",
    "vcvtusi2ss",
    "vucomisd",
    "vucomiss",
    "jae",
    "ja",
    "jbe",
    "jb",
    "jcxz",
    "jecxz",
    "je",
    "jge",
    "jg",
    "jle",
    "jl",
    "jmp",
    "jne",
    "jno",
    "jnp",
    "jns",
    "jo",
    "jp",
    "jrcxz",
    "js",
    "kandb",
    "kandd",
    "kandnb",
    "kandnd",
    "kandnq",
    "kandnw",
    "kandq",
    "kandw",
    "kmovb",
    "kmovd",
    "kmovq",
    "kmovw",
    "knotb",
    "knotd",
    "knotq",
    "knotw",
    "korb",
    "kord",
    "korq",
    "kortestw",
    "korw",
    "kshiftlw",
    "kshiftrw",
    "kunpckbw",
    "kxnorb",
    "kxnord",
    "kxnorq",
    "kxnorw",
    "kxorb",
    "kxord",
    "kxorq",
    "kxorw",
    "lahf",
    "lar",
    "lddqu",
    "ldmxcsr",
    "lds",
    "fldz",
    "fld1",
    "fld",
    "lea",
    "leave",
    "les",
    "lfence",
    "lfs",
    "lgdt",
    "lgs",
    "lidt",
    "lldt",
    "lmsw",
    "or",
    "sub",
    "xor",
    "lodsb",
    "lodsd",
    "lodsq",
    "lodsw",
    "loop",
    "loope",
    "loopne",
    "retf",
    "retfq",
    "lsl",
    "lss",
    "ltr",
    "xadd",
    "lzcnt",
    "maskmovdqu",
    "maxpd",
    "maxps",
    "maxsd",
    "maxss",
    "mfence",
    "minpd",
    "minps",
    "minsd",
    "minss",
    "cvtpd2pi",
    "cvtpi2pd",
    "cvtpi2ps",
    "cvtps2pi",
    "cvttpd2pi",
    "cvttps2pi",
    "emms",
    "maskmovq",
    "movd",
    "movdq2q",
    "movntq",
    "movq2dq",
    "movq",
    "pabsb",
    "pabsd",
    "pabsw",
    "packssdw",
    "packsswb",
    "packuswb",
    "paddb",
    "paddd",
    "paddq",
    "paddsb",
    "paddsw",
    "paddusb",
    "paddusw",
    "paddw",
    "palignr",
    "pandn",
    "pand",
    "pavgb",
    "pavgw",
    "pcmpeqb",
    "pcmpeqd",
    "pcmpeqw",
    "pcmpgtb",
    "pcmpgtd",
    "pcmpgtw",
    "pextrw",
    "phaddsw",
    "phaddw",
    "phaddd",
    "phsubd",
    "phsubsw",
    "phsubw",
    "pinsrw",
    "pmaddubsw",
    "pmaddwd",
    "pmaxsw",
    "pmaxub",
    "pminsw",
    "pminub",
    "pmovmskb",
    "pmulhrsw",
    "pmulhuw",
    "pmulhw",
    "pmullw",
    "pmuludq",
    "por",
    "psadbw",
    "pshufb",
    "pshufw",
    "psignb",
    "psignd",
    "psignw",
    "pslld",
    "psllq",
    "psllw",
    "psrad",
    "psraw",
    "psrld",
    "psrlq",
    "psrlw",
    "psubb",
    "psubd",
    "psubq",
    "psubsb",
    "psubsw",
    "psubusb",
    "psubusw",
    "psubw",
    "punpckhbw",
    "punpckhdq",
    "punpckhwd",
    "punpcklbw",
    "punpckldq",
    "punpcklwd",
    "pxor",
    "monitor",
    "montmul",
    "mov",
    "movabs",
    "movbe",
    "movddup",
    "movdqa",
    "movdqu",
    "movhlps",
    "movhpd",
    "movhps",
    "movlhps",
    "movlpd",
    "movlps",
    "movmskpd",
    "movmskps",
    "movntdqa",
    "movntdq",
    "movnti",
    "movntpd",
    "movntps",
    "movntsd",
    "movntss",
    "movsb",
    "movsd",
    "movshdup",
    "movsldup",
    "movsq",
    "movss",
    "movsw",
    "movsx",
    "movsxd",
    "movupd",
    "movups",
    "movzx",
    "mpsadbw",
    "mul",
    "mulpd",
    "mulps",
    "mulsd",
    "mulss",
    "mulx",
    "fmul",
    "fimul",
    "fmulp",
    "mwait",
    "neg",
    "nop",
    "not",
    "out",
    "outsb",
    "outsd",
    "outsw",
    "packusdw",
    "pause",
    "pavgusb",
    "pblendvb",
    "pblendw",
    "pclmulqdq",
    "pcmpeqq",
    "pcmpestri",
    "pcmpestrm",
    "pcmpgtq",
    "pcmpistri",
    "pcmpistrm",
    "pdep",
    "pext",
    "pextrb",
    "pextrd",
    "pextrq",
    "pf2id",
    "pf2iw",
    "pfacc",
    "pfadd",
    "pfcmpeq",
    "pfcmpge",
    "pfcmpgt",
    "pfmax",
    "pfmin",
    "pfmul",
    "pfnacc",
    "pfpnacc",
    "pfrcpit1",
    "pfrcpit2",
    "pfrcp",
    "pfrsqit1",
    "pfrsqrt",
    "pfsubr",
    "pfsub",
    "phminposuw",
    "pi2fd",
    "pi2fw",
    "pinsrb",
    "pinsrd",
    "pinsrq",
    "pmaxsb",
    "pmaxsd",
    "pmaxud",
    "pmaxuw",
    "pminsb",
    "pminsd",
    "pminud",
    "pminuw",
    "pmovsxbd",
    "pmovsxbq",
    "pmovsxbw",
    "pmovsxdq",
    "pmovsxwd",
    "pmovsxwq",
    "pmovzxbd",
    "pmovzxbq",
    "pmovzxbw",
    "pmovzxdq",
    "pmovzxwd",
    "pmovzxwq",
    "pmuldq",
    "pmulhrw",
    "pmulld",
    "pop",
    "popaw",
    "popal",
    "popcnt",
    "popf",
    "popfd",
    "popfq",
    "prefetch",
    "prefetchnta",
    "prefetcht0",
    "prefetcht1",
    "prefetcht2",
    "prefetchw",
    "pshufd",
    "pshufhw",
    "pshuflw",
    "pslldq",
    "psrldq",
    "pswapd",
    "ptest",
    "punpckhqdq",
    "punpcklqdq",
    "push",
    "pushaw",
    "pushal",
    "pushf",
    "pushfd",
    "pushfq",
    "rcl",
    "rcpps",
    "rcpss",
    "rcr",
    "rdfsbase",
    "rdgsbase",
    "rdmsr",
    "rdpmc",
    "rdrand",
    "rdseed",
    "rdtsc",
    "rdtscp",
    "rol",
    "ror",
    "rorx",
    "roundpd",
    "roundps",
    "roundsd",
    "roundss",
    "rsm",
    "rsqrtps",
    "rsqrtss",
    "sahf",
    "sal",
    "salc",
    "sar",
    "sarx",
    "sbb",
    "scasb",
    "scasd",
    "scasq",
    "scasw",
    "setae",
    "seta",
    "setbe",
    "setc",
    "setb",
    "sete",
    "setge",
    "setg",
    "setle",
    "setl",
    "setne",
    "setno",
    "setnp",
    "setns",
    "seto",
    "setp",
    "sets",
    "sfence",
    "sgdt",
    "sha1msg1",
    "sha1msg2",
    "sha1nexte",
    "sha1rnds4",
    "sha256msg1",
    "sha256msg2",
    "sha256rnds2",
    "shl",
    "shld",
    "shlx",
    "shr",
    "shrd",
    "shrx",
    "shufpd",
    "shufps",
    "sidt",
    "fsin",
    "skinit",
    "sldt",
    "smsw",
    "sqrtpd",
    "sqrtps",
    "sqrtsd",
    "sqrtss",
    "fsqrt",
    "stac",
    "stc",
    "std",
    "stgi",
    "sti",
    "stmxcsr",
    "stosb",
    "stosd",
    "stosq",
    "stosw",
    "str",
    "fst",
    "fstp",
    "fstpnce",
    "subpd",
    "subps",
    "fsubr",
    "fisubr",
    "fsubrp",
    "subsd",
    "subss",
    "fsub",
    "fisub",
    "fsubp",
    "swapgs",
    "syscall",
    "sysenter",
    "sysexit",
    "sysret",
    "t1mskc",
    "test",
    "ud2",
    "ftst",
    "tzcnt",
    "tzmsk",
    "fucompi",
    "fucomi",
    "fucompp",
    "fucomp",
    "fucom",
    "ud2b",
    "unpckhpd",
    "unpckhps",
    "unpcklpd",
    "unpcklps",
    "vaddpd",
    "vaddps",
    "vaddsd",
    "vaddss",
    "vaddsubpd",
    "vaddsubps",
    "vaesdeclast",
    "vaesdec",
    "vaesenclast",
    "vaesenc",
    "vaesimc",
    "vaeskeygenassist",
    "valignd",
    "valignq",
    "vandnpd",
    "vandnps",
    "vandpd",
    "vandps",
    "vblendmpd",
    "vblendmps",
    "vblendpd",
    "vblendps",
    "vblendvpd",
    "vblendvps",
    "vbroadcastf128",
    "vbroadcasti128",
    "vbroadcasti32x4",
    "vbroadcasti64x4",
    "vbroadcastsd",
    "vbroadcastss",
    "vcmppd",
    "vcmpps",
    "vcmpsd",
    "vcmpss",
    "vcvtdq2pd",
    "vcvtdq2ps",
    "vcvtpd2dqx",
    "vcvtpd2dq",
    "vcvtpd2psx",
    "vcvtpd2ps",
    "vcvtpd2udq",
    "vcvtph2ps",
    "vcvtps2dq",
    "vcvtps2pd",
    "vcvtps2ph",
    "vcvtps2udq",
    "vcvtsd2si",
    "vcvtsd2usi",
    "vcvtss2si",
    "vcvtss2usi",
    "vcvttpd2dqx",
    "vcvttpd2dq",
    "vcvttpd2udq",
    "vcvttps2dq",
    "vcvttps2udq",
    "vcvtudq2pd",
    "vcvtudq2ps",
    "vdivpd",
    "vdivps",
    "vdivsd",
    "vdivss",
    "vdppd",
    "vdpps",
    "verr",
    "verw",
    "vextractf128",
    "vextractf32x4",
    "vextractf64x4",
    "vextracti128",
    "vextracti32x4",
    "vextracti64x4",
    "vextractps",
    "vfmadd132pd",
    "vfmadd132ps",
    "vfmadd213pd",
    "vfmadd213ps",
    "vfmaddpd",
    "vfmadd231pd",
    "vfmaddps",
    "vfmadd231ps",
    "vfmaddsd",
    "vfmadd213sd",
    "vfmadd132sd",
    "vfmadd231sd",
    "vfmaddss",
    "vfmadd213ss",
    "vfmadd132ss",
    "vfmadd231ss",
    "vfmaddsub132pd",
    "vfmaddsub132ps",
    "vfmaddsub213pd",
    "vfmaddsub213ps",
    "vfmaddsubpd",
    "vfmaddsub231pd",
    "vfmaddsubps",
    "vfmaddsub231ps",
    "vfmsub132pd",
    "vfmsub132ps",
    "vfmsub213pd",
    "vfmsub213ps",
    "vfmsubadd132pd",
    "vfmsubadd132ps",
    "vfmsubadd213pd",
    "vfmsubadd213ps",
    "vfmsubaddpd",
    "vfmsubadd231pd",
    "vfmsubaddps",
    "vfmsubadd231ps",
    "vfmsubpd",
    "vfmsub231pd",
    "vfmsubps",
    "vfmsub231ps",
    "vfmsubsd",
    "vfmsub213sd",
    "vfmsub132sd",
    "vfmsub231sd",
    "vfmsubss",
    "vfmsub213ss",
    "vfmsub132ss",
    "vfmsub231ss",
    "vfnmadd132pd",
    "vfnmadd132ps",
    "vfnmadd213pd",
    "vfnmadd213ps",
    "vfnmaddpd",
    "vfnmadd231pd",
    "vfnmaddps",
    "vfnmadd231ps",
    "vfnmaddsd",
    "vfnmadd213sd",
    "vfnmadd132sd",
    "vfnmadd231sd",
    "vfnmaddss",
    "vfnmadd213ss",
    "vfnmadd132ss",
    "vfnmadd231ss",
    "vfnmsub132pd",
    "vfnmsub132ps",
    "vfnmsub213pd",
    "vfnmsub213ps",
    "vfnmsubpd",
    "vfnmsub231pd",
    "vfnmsubps",
    "vfnmsub231ps",
    "vfnmsubsd",
    "vfnmsub213sd",
    "vfnmsub132sd",
    "vfnmsub231sd",
    "vfnmsubss",
    "vfnmsub213ss",
    "vfnmsub132ss",
    "vfnmsub231ss",
    "vfrczpd",
    "vfrczps",
    "vfrczsd",
    "vfrczss",
    "vorpd",
    "vorps",
    "vxorpd",
    "vxorps",
    "vgatherdpd",
    "vgatherdps",
    "vgatherpf0dpd",
    "vgatherpf0dps",
    "vgatherpf0qpd",
    "vgatherpf0qps",
    "vgatherpf1dpd",
    "vgatherpf1dps",
    "vgatherpf1qpd",
    "vgatherpf1qps",
    "vgatherqpd",
    "vgatherqps",
    "vhaddpd",
    "vhaddps",
    "vhsubpd",
    "vhsubps",
    "vinsertf128",
    "vinsertf32x4",
    "vinsertf64x4",
    "vinserti128",
    "vinserti32x4",
    "vinserti64x4",
    "vinsertps",
    "vlddqu",
    "vldmxcsr",
    "vmaskmovdqu",
    "vmaskmovpd",
    "vmaskmovps",
    "vmaxpd",
    "vmaxps",
    "vmaxsd",
    "vmaxss",
    "vmcall",
    "vmclear",
    "vmfunc",
    "vminpd",
    "vminps",
    "vminsd",
    "vminss",
    "vmlaunch",
    "vmload",
    "vmmcall",
    "vmovq",
    "vmovddup",
    "vmovd",
    "vmovdqa32",
    "vmovdqa64",
    "vmovdqa",
    "vmovdqu16",
    "vmovdqu32",
    "vmovdqu64",
    "vmovdqu8",
    "vmovdqu",
    "vmovhlps",
    "vmovhpd",
    "vmovhps",
    "vmovlhps",
    "vmovlpd",
    "vmovlps",
    "vmovmskpd",
    "vmovmskps",
    "vmovntdqa",
    "vmovntdq",
    "vmovntpd",
    "vmovntps",
    "vmovsd",
    "vmovshdup",
    "vmovsldup",
    "vmovss",
    "vmovupd",
    "vmovups",
    "vmpsadbw",
    "vmptrld",
    "vmptrst",
    "vmread",
    "vmresume",
    "vmrun",
    "vmsave",
    "vmulpd",
    "vmulps",
    "vmulsd",
    "vmulss",
    "vmwrite",
    "vmxoff",
    "vmxon",
    "vpabsb",
    "vpabsd",
    "vpabsq",
    "vpabsw",
    "vpackssdw",
    "vpacksswb",
    "vpackusdw",
    "vpackuswb",
    "vpaddb",
    "vpaddd",
    "vpaddq",
    "vpaddsb",
    "vpaddsw",
    "vpaddusb",
    "vpaddusw",
    "vpaddw",
    "vpalignr",
    "vpandd",
    "vpandnd",
    "vpandnq",
    "vpandn",
    "vpandq",
    "vpand",
    "vpavgb",
    "vpavgw",
    "vpblendd",
    "vpblendmd",
    "vpblendmq",
    "vpblendvb",
    "vpblendw",
    "vpbroadcastb",
    "vpbroadcastd",
    "vpbroadcastmb2q",
    "vpbroadcastmw2d",
    "vpbroadcastq",
    "vpbroadcastw",
    "vpclmulqdq",
    "vpcmov",
    "vpcmp",
    "vpcmpd",
    "vpcmpeqb",
    "vpcmpeqd",
    "vpcmpeqq",
    "vpcmpeqw",
    "vpcmpestri",
    "vpcmpestrm",
    "vpcmpgtb",
    "vpcmpgtd",
    "vpcmpgtq",
    "vpcmpgtw",
    "vpcmpistri",
    "vpcmpistrm",
    "vpcmpq",
    "vpcmpud",
    "vpcmpuq",
    "vpcomb",
    "vpcomd",
    "vpcomq",
    "vpcomub",
    "vpcomud",
    "vpcomuq",
    "vpcomuw",
    "vpcomw",
    "vpconflictd",
    "vpconflictq",
    "vperm2f128",
    "vperm2i128",
    "vpermd",
    "vpermi2d",
    "vpermi2pd",
    "vpermi2ps",
    "vpermi2q",
    "vpermil2pd",
    "vpermil2ps",
    "vpermilpd",
    "vpermilps",
    "vpermpd",
    "vpermps",
    "vpermq",
    "vpermt2d",
    "vpermt2pd",
    "vpermt2ps",
    "vpermt2q",
    "vpextrb",
    "vpextrd",
    "vpextrq",
    "vpextrw",
    "vpgatherdd",
    "vpgatherdq",
    "vpgatherqd",
    "vpgatherqq",
    "vphaddbd",
    "vphaddbq",
    "vphaddbw",
    "vphadddq",
    "vphaddd",
    "vphaddsw",
    "vphaddubd",
    "vphaddubq",
    "vphaddubw",
    "vphaddudq",
    "vphadduwd",
    "vphadduwq",
    "vphaddwd",
    "vphaddwq",
    "vphaddw",
    "vphminposuw",
    "vphsubbw",
    "vphsubdq",
    "vphsubd",
    "vphsubsw",
    "vphsubwd",
    "vphsubw",
    "vpinsrb",
    "vpinsrd",
    "vpinsrq",
    "vpinsrw",
    "vplzcntd",
    "vplzcntq",
    "vpmacsdd",
    "vpmacsdqh",
    "vpmacsdql",
    "vpmacssdd",
    "vpmacssdqh",
    "vpmacssdql",
    "vpmacsswd",
    "vpmacssww",
    "vpmacswd",
    "vpmacsww",
    "vpmadcsswd",
    "vpmadcswd",
    "vpmaddubsw",
    "vpmaddwd",
    "vpmaskmovd",
    "vpmaskmovq",
    "vpmaxsb",
    "vpmaxsd",
    "vpmaxsq",
    "vpmaxsw",
    "vpmaxub",
    "vpmaxud",
    "vpmaxuq",
    "vpmaxuw",
    "vpminsb",
    "vpminsd",
    "vpminsq",
    "vpminsw",
    "vpminub",
    "vpminud",
    "vpminuq",
    "vpminuw",
    "vpmovdb",
    "vpmovdw",
    "vpmovmskb",
    "vpmovqb",
    "vpmovqd",
    "vpmovqw",
    "vpmovsdb",
    "vpmovsdw",
    "vpmovsqb",
    "vpmovsqd",
    "vpmovsqw",
    "vpmovsxbd",
    "vpmovsxbq",
    "vpmovsxbw",
    "vpmovsxdq",
    "vpmovsxwd",
    "vpmovsxwq",
    "vpmovusdb",
    "vpmovusdw",
    "vpmovusqb",
    "vpmovusqd",
    "vpmovusqw",
    "vpmovzxbd",
    "vpmovzxbq",
    "vpmovzxbw",
    "vpmovzxdq",
    "vpmovzxwd",
    "vpmovzxwq",
    "vpmuldq",
    "vpmulhrsw",
    "vpmulhuw",
    "vpmulhw",
    "vpmulld",
    "vpmullw",
    "vpmuludq",
    "vpord",
    "vporq",
    "vpor",
    "vpperm",
    "vprotb",
    "vprotd",
    "vprotq",
    "vprotw",
    "vpsadbw",
    "vpscatterdd",
    "vpscatterdq",
    "vpscatterqd",
    "vpscatterqq",
    "vpshab",
    "vpshad",
    "vpshaq",
    "vpshaw",
    "vpshlb",
    "vpshld",
    "vpshlq",
    "vpshlw",
    "vpshufb",
    "vpshufd",
    "vpshufhw",
    "vpshuflw",
    "vpsignb",
    "vpsignd",
    "vpsignw",
    "vpslldq",
    "vpslld",
    "vpsllq",
    "vpsllvd",
    "vpsllvq",
    "vpsllw",
    "vpsrad",
    "vpsraq",
    "vpsravd",
    "vpsravq",
    "vpsraw",
    "vpsrldq",
    "vpsrld",
    "vpsrlq",
    "vpsrlvd",
    "vpsrlvq",
    "vpsrlw",
    "vpsubb",
    "vpsubd",
    "vpsubq",
    "vpsubsb",
    "vpsubsw",
    "vpsubusb",
    "vpsubusw",
    "vpsubw",
    "vptestmd",
    "vptestmq",
    "vptestnmd",
    "vptestnmq",
    "vptest",
    "vpunpckhbw",
    "vpunpckhdq",
    "vpunpckhqdq",
    "vpunpckhwd",
    "vpunpcklbw",
    "vpunpckldq",
    "vpunpcklqdq",
    "vpunpcklwd",
    "vpxord",
    "vpxorq",
    "vpxor",
    "vrcp14pd",
    "vrcp14ps",
    "vrcp14sd",
    "vrcp14ss",
    "vrcp28pd",
    "vrcp28ps",
    "vrcp28sd",
    "vrcp28ss",
    "vrcpps",
    "vrcpss",
    "vrndscalepd",
    "vrndscaleps",
    "vrndscalesd",
    "vrndscaless",
    "vroundpd",
    "vroundps",
    "vroundsd",
    "vroundss",
    "vrsqrt14pd",
    "vrsqrt14ps",
    "vrsqrt14sd",
    "vrsqrt14ss",
    "vrsqrt28pd",
    "vrsqrt28ps",
    "vrsqrt28sd",
    "vrsqrt28ss",
    "vrsqrtps",
    "vrsqrtss",
    "vscatterdpd",
    "vscatterdps",
    "vscatterpf0dpd",
    "vscatterpf0dps",
    "vscatterpf0qpd",
    "vscatterpf0qps",
    "vscatterpf1dpd",
    "vscatterpf1dps",
    "vscatterpf1qpd",
    "vscatterpf1qps",
    "vscatterqpd",
    "vscatterqps",
    "vshufpd",
    "vshufps",
    "vsqrtpd",
    "vsqrtps",
    "vsqrtsd",
    "vsqrtss",
    "vstmxcsr",
    "vsubpd",
    "vsubps",
    "vsubsd",
    "vsubss",
    "vtestpd",
    "vtestps",
    "vunpckhpd",
    "vunpckhps",
    "vunpcklpd",
    "vunpcklps",
    "vzeroall",
    "vzeroupper",
    "wait",
    "wbinvd",
    "wrfsbase",
    "wrgsbase",
    "wrmsr",
    "xabort",
    "xacquire",
    "xbegin",
    "xchg",
    "fxch",
    "xcryptcbc",
    "xcryptcfb",
    "xcryptctr",
    "xcryptecb",
    "xcryptofb",
    "xend",
    "xgetbv",
    "xlatb",
    "xrelease",
    "xrstor",
    "xrstor64",
    "xsave",
    "xsave64",
    "xsaveopt",
    "xsaveopt64",
    "xsetbv",
    "xsha1",
    "xsha256",
    "xstore",
    "xtest",
];

pub const DISASMX86_GROUP_MAP: [&'static str; 47] = [
    "",
    "jump",
    "call",
    "ret",
    "int",
    "iret",
    "vm",
    "3dnow",
    "aes",
    "adx",
    "avx",
    "avx2",
    "avx512",
    "bmi",
    "bmi2",
    "cmov",
    "fc16",
    "fma",
    "fma4",
    "fsgsbase",
    "hle",
    "mmx",
    "mode32",
    "mode64",
    "rtm",
    "sha",
    "sse1",
    "sse2",
    "sse3",
    "sse41",
    "sse42",
    "sse4a",
    "ssse3",
    "pclmul",
    "xop",
    "cdi",
    "eri",
    "tbm",
    "16bitmode",
    "not64bitmode",
    "sgx",
    "dqi",
    "bwi",
    "pfi",
    "vlx",
    "smap",
    "novlx",
];

pub const DISASMX86_OPLOOKUP_MAP: [u16; 6268] = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    6,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    0,
    0,
    8,
    8,
    0,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    0,
    0,
    8,
    8,
    0,
    8,
    8,
    8,
    8,
    8,
    8,
    0,
    8,
    0,
    8,
    8,
    0,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    11,
    11,
    12,
    12,
    12,
    12,
    13,
    13,
    14,
    14,
    15,
    15,
    16,
    16,
    17,
    15,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    0,
    18,
    18,
    18,
    18,
    19,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    23,
    23,
    24,
    24,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    26,
    26,
    26,
    26,
    27,
    27,
    28,
    28,
    29,
    29,
    30,
    30,
    31,
    31,
    0,
    0,
    0,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    32,
    33,
    33,
    33,
    33,
    34,
    34,
    34,
    34,
    35,
    35,
    35,
    35,
    36,
    36,
    36,
    36,
    37,
    37,
    37,
    37,
    38,
    38,
    39,
    39,
    40,
    40,
    41,
    41,
    42,
    42,
    42,
    42,
    43,
    43,
    43,
    43,
    44,
    44,
    44,
    44,
    45,
    45,
    45,
    45,
    46,
    46,
    46,
    46,
    47,
    47,
    48,
    48,
    48,
    48,
    48,
    48,
    49,
    49,
    49,
    49,
    49,
    49,
    50,
    50,
    51,
    51,
    51,
    51,
    51,
    51,
    51,
    51,
    51,
    51,
    51,
    51,
    52,
    52,
    52,
    52,
    52,
    52,
    52,
    52,
    52,
    52,
    52,
    52,
    53,
    53,
    53,
    53,
    53,
    53,
    53,
    53,
    53,
    53,
    53,
    53,
    54,
    54,
    54,
    54,
    54,
    54,
    54,
    54,
    54,
    54,
    54,
    54,
    55,
    55,
    55,
    55,
    56,
    56,
    56,
    56,
    56,
    56,
    56,
    56,
    56,
    57,
    58,
    59,
    60,
    0,
    0,
    0,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    69,
    69,
    69,
    69,
    69,
    70,
    70,
    70,
    70,
    70,
    70,
    71,
    71,
    71,
    71,
    71,
    71,
    72,
    72,
    72,
    72,
    72,
    72,
    73,
    0,
    0,
    0,
    74,
    0,
    0,
    0,
    75,
    75,
    75,
    75,
    75,
    75,
    76,
    0,
    0,
    0,
    77,
    77,
    77,
    77,
    77,
    77,
    78,
    78,
    78,
    78,
    78,
    78,
    79,
    79,
    79,
    79,
    79,
    79,
    80,
    80,
    80,
    80,
    80,
    80,
    81,
    0,
    0,
    0,
    82,
    0,
    0,
    0,
    83,
    83,
    83,
    83,
    83,
    83,
    84,
    0,
    0,
    0,
    85,
    85,
    85,
    85,
    85,
    85,
    86,
    86,
    86,
    86,
    86,
    86,
    87,
    0,
    0,
    0,
    88,
    88,
    88,
    88,
    88,
    88,
    89,
    89,
    89,
    89,
    89,
    89,
    90,
    90,
    90,
    90,
    90,
    90,
    91,
    0,
    0,
    0,
    92,
    92,
    92,
    92,
    92,
    92,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    93,
    94,
    94,
    94,
    94,
    95,
    95,
    95,
    95,
    96,
    97,
    97,
    97,
    97,
    97,
    98,
    99,
    99,
    99,
    99,
    100,
    101,
    102,
    102,
    102,
    102,
    102,
    102,
    103,
    102,
    102,
    104,
    104,
    105,
    105,
    106,
    107,
    108,
    109,
    110,
    0,
    0,
    0,
    111,
    111,
    112,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    113,
    114,
    114,
    115,
    115,
    116,
    116,
    117,
    117,
    118,
    118,
    119,
    119,
    120,
    120,
    120,
    120,
    121,
    121,
    122,
    122,
    122,
    122,
    123,
    123,
    123,
    123,
    124,
    124,
    125,
    125,
    125,
    125,
    126,
    126,
    127,
    127,
    128,
    128,
    128,
    128,
    129,
    129,
    129,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    135,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    136,
    137,
    137,
    138,
    138,
    139,
    139,
    140,
    140,
    141,
    139,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    139,
    142,
    142,
    142,
    142,
    143,
    143,
    143,
    143,
    144,
    144,
    145,
    145,
    146,
    144,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    144,
    147,
    147,
    148,
    148,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    150,
    151,
    152,
    153,
    153,
    154,
    154,
    155,
    156,
    156,
    156,
    156,
    156,
    157,
    157,
    157,
    157,
    157,
    158,
    159,
    109,
    109,
    106,
    106,
    160,
    161,
    162,
    163,
    164,
    164,
    165,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    178,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    27,
    27,
    28,
    28,
    29,
    29,
    30,
    30,
    0,
    0,
    198,
    199,
    200,
    200,
    201,
    201,
    202,
    203,
    204,
    204,
    205,
    205,
    206,
    207,
    207,
    208,
    208,
    209,
    210,
    210,
    211,
    211,
    212,
    212,
    212,
    212,
    212,
    212,
    212,
    212,
    213,
    213,
    213,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    214,
    215,
    215,
    215,
    215,
    215,
    215,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    216,
    217,
    218,
    218,
    219,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    227,
    228,
    229,
    229,
    230,
    230,
    231,
    231,
    232,
    233,
    234,
    235,
    235,
    235,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    236,
    236,
    237,
    237,
    237,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    97,
    97,
    99,
    99,
    104,
    104,
    105,
    105,
    121,
    121,
    122,
    122,
    122,
    122,
    123,
    123,
    123,
    123,
    124,
    124,
    128,
    128,
    128,
    128,
    129,
    129,
    129,
    129,
    0,
    238,
    238,
    239,
    239,
    739,
    739,
    740,
    740,
    241,
    241,
    241,
    241,
    242,
    242,
    242,
    242,
    243,
    243,
    244,
    244,
    244,
    244,
    244,
    244,
    244,
    244,
    245,
    245,
    245,
    245,
    245,
    245,
    245,
    245,
    246,
    246,
    247,
    247,
    247,
    247,
    247,
    247,
    247,
    247,
    248,
    248,
    248,
    248,
    249,
    249,
    249,
    249,
    249,
    249,
    249,
    249,
    250,
    250,
    250,
    250,
    251,
    251,
    251,
    251,
    252,
    252,
    252,
    252,
    253,
    253,
    253,
    253,
    254,
    254,
    254,
    254,
    255,
    255,
    255,
    256,
    256,
    256,
    257,
    257,
    257,
    258,
    258,
    258,
    259,
    260,
    260,
    261,
    261,
    261,
    262,
    262,
    262,
    263,
    263,
    263,
    264,
    264,
    264,
    265,
    265,
    265,
    266,
    266,
    266,
    266,
    266,
    266,
    266,
    266,
    266,
    267,
    267,
    267,
    268,
    268,
    268,
    269,
    269,
    269,
    270,
    270,
    270,
    271,
    271,
    271,
    272,
    272,
    272,
    273,
    274,
    274,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    283,
    283,
    283,
    283,
    284,
    284,
    284,
    284,
    284,
    285,
    285,
    285,
    285,
    285,
    286,
    286,
    286,
    286,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    295,
    0,
    0,
    0,
    0,
    296,
    297,
    298,
    299,
    300,
    301,
    302,
    303,
    304,
    305,
    306,
    307,
    308,
    308,
    308,
    308,
    308,
    308,
    102,
    101,
    102,
    102,
    102,
    103,
    309,
    310,
    311,
    311,
    312,
    313,
    314,
    314,
    314,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    314,
    315,
    315,
    315,
    315,
    316,
    316,
    317,
    317,
    318,
    319,
    319,
    319,
    320,
    320,
    320,
    321,
    321,
    321,
    322,
    322,
    322,
    323,
    323,
    324,
    324,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    25,
    135,
    135,
    135,
    135,
    216,
    216,
    216,
    216,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    0,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    328,
    329,
    330,
    331,
    332,
    333,
    334,
    335,
    336,
    335,
    335,
    336,
    335,
    337,
    337,
    337,
    337,
    337,
    337,
    338,
    338,
    338,
    339,
    339,
    340,
    340,
    340,
    340,
    341,
    341,
    341,
    341,
    341,
    341,
    342,
    342,
    343,
    343,
    344,
    344,
    345,
    345,
    346,
    346,
    343,
    343,
    344,
    344,
    345,
    345,
    345,
    345,
    346,
    346,
    346,
    346,
    347,
    348,
    348,
    349,
    349,
    350,
    350,
    351,
    351,
    348,
    348,
    349,
    349,
    350,
    350,
    350,
    350,
    351,
    351,
    351,
    351,
    352,
    352,
    353,
    353,
    354,
    354,
    355,
    355,
    356,
    356,
    357,
    357,
    358,
    359,
    359,
    360,
    360,
    360,
    360,
    360,
    360,
    361,
    361,
    362,
    363,
    363,
    364,
    364,
    364,
    364,
    365,
    365,
    366,
    366,
    367,
    367,
    368,
    368,
    369,
    369,
    370,
    370,
    371,
    371,
    372,
    372,
    373,
    373,
    374,
    374,
    375,
    375,
    376,
    376,
    377,
    377,
    378,
    378,
    379,
    379,
    380,
    380,
    381,
    381,
    382,
    382,
    383,
    383,
    384,
    384,
    385,
    385,
    386,
    386,
    387,
    387,
    388,
    388,
    389,
    389,
    390,
    391,
    391,
    392,
    392,
    393,
    393,
    394,
    394,
    395,
    395,
    396,
    396,
    397,
    397,
    398,
    398,
    399,
    399,
    400,
    400,
    401,
    401,
    402,
    402,
    403,
    403,
    404,
    405,
    405,
    406,
    406,
    407,
    407,
    408,
    408,
    409,
    409,
    410,
    410,
    411,
    411,
    412,
    412,
    413,
    413,
    414,
    414,
    415,
    415,
    416,
    416,
    417,
    417,
    417,
    418,
    418,
    418,
    419,
    419,
    419,
    420,
    420,
    420,
    421,
    421,
    421,
    422,
    422,
    422,
    423,
    423,
    423,
    424,
    424,
    424,
    425,
    425,
    426,
    426,
    427,
    427,
    428,
    428,
    429,
    429,
    430,
    430,
    431,
    431,
    432,
    432,
    433,
    433,
    434,
    434,
    435,
    435,
    436,
    436,
    437,
    437,
    438,
    438,
    439,
    439,
    0,
    440,
    441,
    0,
    0,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    0,
    442,
    442,
    442,
    0,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    443,
    443,
    443,
    443,
    442,
    442,
    442,
    442,
    442,
    443,
    443,
    443,
    443,
    442,
    442,
    443,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    364,
    364,
    364,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    442,
    198,
    198,
    198,
    198,
    199,
    199,
    199,
    199,
    444,
    444,
    444,
    444,
    444,
    444,
    445,
    445,
    360,
    360,
    360,
    360,
    446,
    446,
    446,
    446,
    447,
    447,
    447,
    447,
    448,
    449,
    449,
    450,
    450,
    451,
    452,
    452,
    453,
    453,
    454,
    455,
    456,
    457,
    458,
    458,
    459,
    460,
    461,
    462,
    0,
    360,
    360,
    364,
    364,
    364,
    364,
    463,
    464,
    464,
    464,
    464,
    364,
    364,
    465,
    465,
    464,
    466,
    466,
    467,
    360,
    360,
    468,
    468,
    468,
    468,
    469,
    470,
    470,
    470,
    470,
    470,
    470,
    471,
    470,
    471,
    470,
    470,
    471,
    470,
    472,
    472,
    472,
    472,
    473,
    473,
    473,
    473,
    364,
    364,
    364,
    364,
    474,
    474,
    474,
    474,
    474,
    474,
    474,
    474,
    474,
    474,
    474,
    474,
    475,
    475,
    476,
    476,
    476,
    476,
    476,
    476,
    476,
    476,
    477,
    477,
    478,
    478,
    479,
    479,
    479,
    479,
    480,
    480,
    480,
    480,
    481,
    481,
    481,
    481,
    482,
    482,
    483,
    483,
    484,
    482,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    482,
    485,
    486,
    486,
    486,
    486,
    486,
    486,
    486,
    486,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    487,
    488,
    488,
    488,
    488,
    488,
    488,
    488,
    488,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    325,
    200,
    200,
    201,
    201,
    489,
    489,
    489,
    489,
    489,
    489,
    490,
    491,
    492,
    365,
    365,
    366,
    366,
    367,
    367,
    368,
    368,
    369,
    369,
    493,
    493,
    370,
    370,
    371,
    371,
    372,
    372,
    373,
    373,
    374,
    374,
    375,
    375,
    376,
    376,
    377,
    377,
    378,
    378,
    379,
    379,
    380,
    380,
    381,
    381,
    494,
    382,
    382,
    495,
    495,
    383,
    383,
    496,
    496,
    497,
    497,
    498,
    498,
    384,
    384,
    385,
    385,
    499,
    499,
    386,
    386,
    0,
    0,
    500,
    500,
    0,
    0,
    501,
    501,
    387,
    387,
    388,
    388,
    502,
    502,
    389,
    389,
    0,
    0,
    503,
    503,
    0,
    0,
    504,
    504,
    505,
    505,
    505,
    505,
    506,
    506,
    506,
    506,
    507,
    507,
    508,
    508,
    509,
    509,
    390,
    390,
    390,
    510,
    510,
    511,
    511,
    512,
    512,
    513,
    513,
    514,
    514,
    515,
    515,
    516,
    516,
    517,
    517,
    518,
    518,
    519,
    519,
    520,
    520,
    521,
    521,
    522,
    522,
    523,
    523,
    524,
    524,
    525,
    525,
    526,
    526,
    527,
    527,
    528,
    528,
    393,
    393,
    391,
    391,
    392,
    392,
    529,
    529,
    394,
    394,
    395,
    395,
    396,
    396,
    530,
    530,
    531,
    531,
    532,
    532,
    533,
    533,
    534,
    534,
    397,
    397,
    398,
    398,
    399,
    399,
    535,
    535,
    536,
    536,
    400,
    400,
    401,
    401,
    537,
    537,
    538,
    538,
    539,
    539,
    540,
    540,
    402,
    402,
    403,
    403,
    541,
    541,
    542,
    542,
    404,
    543,
    543,
    544,
    544,
    545,
    545,
    546,
    546,
    547,
    547,
    548,
    548,
    549,
    549,
    550,
    550,
    551,
    551,
    552,
    552,
    553,
    553,
    554,
    554,
    555,
    555,
    405,
    405,
    556,
    556,
    406,
    406,
    407,
    407,
    557,
    557,
    408,
    408,
    409,
    409,
    558,
    558,
    558,
    558,
    558,
    558,
    558,
    558,
    558,
    559,
    560,
    561,
    561,
    561,
    561,
    561,
    561,
    558,
    558,
    558,
    558,
    562,
    563,
    564,
    558,
    558,
    558,
    558,
    558,
    558,
    558,
    558,
    410,
    410,
    565,
    566,
    567,
    568,
    569,
    570,
    411,
    411,
    412,
    412,
    571,
    571,
    572,
    572,
    573,
    573,
    414,
    414,
    415,
    415,
    416,
    416,
    574,
    417,
    417,
    417,
    418,
    418,
    418,
    419,
    419,
    419,
    420,
    420,
    420,
    421,
    421,
    421,
    575,
    422,
    422,
    422,
    423,
    423,
    423,
    424,
    424,
    424,
    425,
    425,
    426,
    426,
    427,
    427,
    428,
    428,
    429,
    429,
    430,
    430,
    431,
    431,
    432,
    432,
    576,
    576,
    577,
    577,
    433,
    433,
    434,
    434,
    578,
    578,
    435,
    435,
    436,
    436,
    437,
    437,
    579,
    579,
    438,
    438,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    581,
    582,
    580,
    580,
    580,
    580,
    580,
    580,
    583,
    584,
    585,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    580,
    439,
    439,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    586,
    587,
    587,
    587,
    587,
    588,
    588,
    588,
    588,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    589,
    590,
    590,
    591,
    591,
    592,
    593,
    594,
    594,
    594,
    595,
    595,
    595,
    596,
    597,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    149,
    149,
    149,
    149,
    149,
    149,
    0,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    598,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    599,
    600,
    600,
    600,
    600,
    601,
    601,
    602,
    602,
    603,
    603,
    603,
    604,
    604,
    604,
    605,
    606,
    606,
    606,
    606,
    607,
    607,
    607,
    607,
    608,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    609,
    610,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    611,
    612,
    612,
    612,
    612,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    613,
    614,
    615,
    616,
    617,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    618,
    618,
    619,
    619,
    620,
    620,
    621,
    621,
    621,
    621,
    622,
    622,
    623,
    623,
    624,
    624,
    625,
    625,
    626,
    626,
    627,
    627,
    628,
    628,
    629,
    629,
    630,
    630,
    631,
    631,
    632,
    632,
    633,
    633,
    634,
    634,
    635,
    636,
    636,
    636,
    637,
    637,
    638,
    638,
    639,
    639,
    640,
    640,
    641,
    641,
    642,
    642,
    643,
    643,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    644,
    645,
    645,
    645,
    645,
    645,
    645,
    645,
    645,
    645,
    645,
    645,
    645,
    646,
    646,
    646,
    646,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    647,
    648,
    648,
    648,
    648,
    648,
    648,
    648,
    648,
    648,
    648,
    648,
    648,
    649,
    649,
    649,
    649,
    650,
    650,
    651,
    651,
    652,
    652,
    652,
    653,
    0,
    0,
    0,
    654,
    655,
    655,
    655,
    655,
    655,
    656,
    656,
    656,
    656,
    657,
    657,
    658,
    658,
    659,
    659,
    659,
    659,
    660,
    660,
    660,
    660,
    661,
    0,
    0,
    0,
    662,
    663,
    664,
    665,
    666,
    667,
    668,
    669,
    670,
    671,
    672,
    672,
    672,
    672,
    673,
    673,
    106,
    106,
    109,
    674,
    674,
    674,
    675,
    674,
    674,
    674,
    1275,
    1275,
    674,
    674,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    673,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    326,
    676,
    676,
    677,
    677,
    678,
    678,
    679,
    679,
    680,
    678,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    678,
    681,
    681,
    681,
    681,
    682,
    682,
    682,
    682,
    683,
    683,
    684,
    684,
    685,
    683,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    683,
    686,
    687,
    688,
    689,
    689,
    690,
    690,
    691,
    691,
    691,
    691,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    692,
    0,
    692,
    692,
    692,
    0,
    0,
    0,
    0,
    0,
    0,
    693,
    694,
    0,
    0,
    0,
    695,
    695,
    695,
    695,
    695,
    695,
    696,
    696,
    696,
    696,
    238,
    238,
    239,
    239,
    697,
    698,
    699,
    700,
    0,
    0,
    0,
    0,
    0,
    0,
    701,
    702,
    703,
    703,
    704,
    704,
    705,
    705,
    706,
    706,
    0,
    707,
    707,
    707,
    707,
    707,
    707,
    707,
    707,
    707,
    707,
    707,
    707,
    707,
    708,
    708,
    708,
    708,
    708,
    708,
    708,
    708,
    708,
    708,
    708,
    708,
    708,
    709,
    709,
    709,
    709,
    709,
    709,
    710,
    710,
    710,
    710,
    710,
    710,
    711,
    711,
    711,
    711,
    712,
    712,
    712,
    712,
    713,
    713,
    714,
    714,
    715,
    715,
    716,
    716,
    717,
    717,
    718,
    718,
    719,
    719,
    719,
    719,
    720,
    720,
    720,
    720,
    721,
    721,
    721,
    721,
    722,
    722,
    722,
    722,
    723,
    723,
    723,
    723,
    724,
    724,
    724,
    724,
    0,
    725,
    725,
    726,
    726,
    727,
    727,
    727,
    727,
    728,
    728,
    728,
    728,
    729,
    729,
    729,
    729,
    730,
    730,
    730,
    730,
    731,
    732,
    733,
    733,
    734,
    734,
    735,
    735,
    735,
    735,
    736,
    736,
    736,
    736,
    736,
    736,
    737,
    737,
    737,
    737,
    737,
    737,
    737,
    737,
    737,
    737,
    737,
    737,
    737,
    738,
    738,
    738,
    738,
    738,
    738,
    738,
    738,
    738,
    738,
    738,
    738,
    738,
    739,
    739,
    739,
    739,
    739,
    739,
    739,
    739,
    740,
    740,
    740,
    740,
    740,
    740,
    740,
    740,
    241,
    241,
    241,
    241,
    242,
    242,
    242,
    242,
    741,
    741,
    741,
    741,
    741,
    741,
    742,
    742,
    742,
    742,
    742,
    742,
    742,
    743,
    744,
    744,
    744,
    744,
    744,
    744,
    745,
    746,
    746,
    746,
    746,
    746,
    746,
    747,
    747,
    747,
    748,
    748,
    748,
    748,
    748,
    748,
    749,
    749,
    749,
    749,
    749,
    749,
    749,
    750,
    750,
    750,
    750,
    750,
    750,
    751,
    751,
    751,
    751,
    751,
    751,
    752,
    752,
    752,
    753,
    753,
    753,
    753,
    753,
    753,
    753,
    753,
    243,
    243,
    243,
    243,
    754,
    754,
    754,
    754,
    244,
    244,
    244,
    244,
    244,
    244,
    245,
    245,
    245,
    245,
    245,
    245,
    244,
    244,
    245,
    245,
    246,
    246,
    246,
    246,
    755,
    755,
    755,
    755,
    755,
    755,
    755,
    755,
    756,
    756,
    756,
    756,
    757,
    758,
    758,
    758,
    758,
    758,
    759,
    759,
    760,
    760,
    760,
    760,
    760,
    760,
    761,
    761,
    247,
    247,
    247,
    247,
    247,
    247,
    247,
    247,
    248,
    248,
    248,
    248,
    249,
    249,
    249,
    249,
    249,
    249,
    249,
    249,
    250,
    250,
    250,
    250,
    762,
    762,
    763,
    763,
    763,
    251,
    251,
    252,
    252,
    251,
    251,
    252,
    252,
    764,
    764,
    764,
    764,
    764,
    764,
    764,
    764,
    764,
    764,
    764,
    764,
    764,
    765,
    765,
    765,
    765,
    765,
    765,
    765,
    765,
    765,
    765,
    765,
    765,
    765,
    766,
    766,
    766,
    766,
    766,
    766,
    767,
    767,
    767,
    767,
    767,
    767,
    768,
    768,
    769,
    769,
    769,
    769,
    770,
    770,
    771,
    771,
    772,
    772,
    773,
    773,
    774,
    774,
    775,
    775,
    776,
    776,
    777,
    777,
    778,
    778,
    778,
    778,
    779,
    779,
    780,
    780,
    781,
    781,
    781,
    781,
    781,
    782,
    782,
    782,
    782,
    782,
    783,
    783,
    783,
    783,
    783,
    783,
    783,
    783,
    779,
    779,
    779,
    779,
    781,
    781,
    781,
    781,
    784,
    784,
    784,
    784,
    785,
    785,
    785,
    785,
    785,
    785,
    785,
    785,
    780,
    780,
    780,
    780,
    782,
    782,
    782,
    782,
    786,
    786,
    786,
    786,
    787,
    787,
    787,
    787,
    787,
    787,
    787,
    788,
    788,
    789,
    789,
    788,
    788,
    790,
    790,
    791,
    791,
    791,
    791,
    791,
    791,
    791,
    792,
    792,
    793,
    793,
    792,
    792,
    794,
    794,
    795,
    795,
    796,
    796,
    797,
    797,
    797,
    797,
    797,
    798,
    798,
    798,
    798,
    798,
    799,
    799,
    799,
    799,
    799,
    799,
    799,
    799,
    795,
    795,
    795,
    795,
    797,
    797,
    797,
    797,
    800,
    800,
    800,
    800,
    801,
    801,
    801,
    801,
    801,
    801,
    801,
    801,
    796,
    796,
    796,
    796,
    798,
    798,
    798,
    798,
    802,
    802,
    802,
    802,
    803,
    803,
    804,
    804,
    805,
    805,
    805,
    805,
    805,
    806,
    806,
    806,
    806,
    806,
    807,
    807,
    808,
    808,
    809,
    809,
    809,
    809,
    809,
    810,
    810,
    810,
    810,
    810,
    811,
    811,
    811,
    811,
    811,
    811,
    811,
    811,
    807,
    807,
    807,
    807,
    809,
    809,
    809,
    809,
    812,
    812,
    812,
    812,
    813,
    813,
    813,
    813,
    813,
    813,
    813,
    813,
    808,
    808,
    808,
    808,
    810,
    810,
    810,
    810,
    814,
    814,
    814,
    814,
    815,
    815,
    815,
    815,
    815,
    815,
    815,
    815,
    803,
    803,
    803,
    803,
    805,
    805,
    805,
    805,
    816,
    816,
    816,
    816,
    817,
    817,
    817,
    817,
    817,
    817,
    817,
    817,
    804,
    804,
    804,
    804,
    806,
    806,
    806,
    806,
    818,
    818,
    818,
    818,
    819,
    819,
    819,
    819,
    819,
    819,
    819,
    820,
    820,
    821,
    821,
    820,
    820,
    822,
    822,
    823,
    823,
    823,
    823,
    823,
    823,
    823,
    824,
    824,
    825,
    825,
    824,
    824,
    826,
    826,
    827,
    827,
    828,
    828,
    829,
    829,
    829,
    829,
    829,
    830,
    830,
    830,
    830,
    830,
    831,
    831,
    831,
    831,
    831,
    831,
    831,
    831,
    827,
    827,
    827,
    827,
    829,
    829,
    829,
    829,
    832,
    832,
    832,
    832,
    833,
    833,
    833,
    833,
    833,
    833,
    833,
    833,
    828,
    828,
    828,
    828,
    830,
    830,
    830,
    830,
    834,
    834,
    834,
    834,
    835,
    835,
    835,
    835,
    835,
    835,
    835,
    836,
    836,
    837,
    837,
    836,
    836,
    838,
    838,
    839,
    839,
    839,
    839,
    839,
    839,
    839,
    840,
    840,
    841,
    841,
    840,
    840,
    842,
    842,
    843,
    843,
    844,
    844,
    845,
    845,
    845,
    845,
    845,
    846,
    846,
    846,
    846,
    846,
    847,
    847,
    847,
    847,
    847,
    847,
    847,
    847,
    843,
    843,
    843,
    843,
    845,
    845,
    845,
    845,
    848,
    848,
    848,
    848,
    849,
    849,
    849,
    849,
    849,
    849,
    849,
    849,
    844,
    844,
    844,
    844,
    846,
    846,
    846,
    846,
    850,
    850,
    850,
    850,
    851,
    851,
    851,
    851,
    851,
    851,
    851,
    852,
    852,
    853,
    853,
    852,
    852,
    854,
    854,
    855,
    855,
    855,
    855,
    855,
    855,
    855,
    856,
    856,
    857,
    857,
    856,
    856,
    858,
    858,
    859,
    859,
    859,
    859,
    860,
    860,
    860,
    860,
    861,
    861,
    862,
    862,
    721,
    721,
    722,
    722,
    723,
    723,
    724,
    724,
    863,
    863,
    864,
    864,
    865,
    865,
    866,
    866,
    867,
    867,
    867,
    868,
    868,
    868,
    869,
    870,
    871,
    872,
    873,
    874,
    875,
    876,
    877,
    877,
    877,
    878,
    878,
    878,
    879,
    879,
    879,
    879,
    880,
    880,
    880,
    880,
    881,
    881,
    881,
    881,
    882,
    882,
    882,
    882,
    883,
    883,
    884,
    884,
    885,
    885,
    886,
    886,
    887,
    887,
    888,
    888,
    889,
    889,
    889,
    889,
    890,
    890,
    891,
    892,
    892,
    893,
    893,
    893,
    893,
    894,
    894,
    894,
    894,
    895,
    895,
    895,
    895,
    896,
    896,
    896,
    896,
    897,
    897,
    898,
    898,
    895,
    895,
    895,
    895,
    895,
    895,
    895,
    895,
    895,
    895,
    895,
    895,
    895,
    896,
    896,
    896,
    896,
    896,
    896,
    896,
    896,
    896,
    896,
    896,
    896,
    896,
    897,
    897,
    897,
    897,
    897,
    897,
    898,
    898,
    898,
    898,
    898,
    898,
    899,
    900,
    901,
    902,
    902,
    902,
    902,
    903,
    903,
    903,
    903,
    904,
    904,
    905,
    905,
    902,
    902,
    902,
    902,
    902,
    902,
    902,
    902,
    902,
    902,
    902,
    902,
    902,
    903,
    903,
    903,
    903,
    903,
    903,
    903,
    903,
    903,
    903,
    903,
    903,
    903,
    904,
    904,
    904,
    904,
    904,
    904,
    905,
    905,
    905,
    905,
    905,
    905,
    906,
    907,
    907,
    908,
    909,
    909,
    909,
    909,
    909,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    202,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    203,
    910,
    910,
    910,
    910,
    910,
    910,
    911,
    911,
    911,
    911,
    911,
    911,
    911,
    911,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    912,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    913,
    914,
    914,
    914,
    914,
    914,
    914,
    914,
    914,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    915,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    916,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    917,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    918,
    919,
    919,
    919,
    919,
    919,
    919,
    919,
    919,
    920,
    920,
    921,
    921,
    922,
    922,
    923,
    923,
    924,
    924,
    925,
    925,
    926,
    926,
    927,
    927,
    928,
    928,
    928,
    928,
    928,
    929,
    929,
    929,
    929,
    929,
    930,
    930,
    930,
    930,
    930,
    931,
    931,
    931,
    931,
    931,
    911,
    911,
    911,
    911,
    909,
    909,
    909,
    909,
    909,
    909,
    909,
    932,
    932,
    932,
    932,
    932,
    932,
    932,
    932,
    932,
    909,
    909,
    909,
    909,
    933,
    933,
    933,
    933,
    933,
    933,
    934,
    934,
    934,
    934,
    934,
    934,
    911,
    911,
    911,
    911,
    935,
    935,
    935,
    935,
    935,
    935,
    935,
    935,
    935,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    936,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    937,
    909,
    909,
    909,
    909,
    909,
    909,
    938,
    938,
    938,
    938,
    939,
    940,
    941,
    941,
    941,
    941,
    942,
    943,
    943,
    944,
    944,
    945,
    945,
    945,
    945,
    945,
    945,
    945,
    945,
    945,
    945,
    945,
    945,
    945,
    946,
    946,
    946,
    946,
    946,
    946,
    946,
    946,
    946,
    946,
    946,
    946,
    946,
    947,
    947,
    947,
    947,
    947,
    947,
    948,
    948,
    948,
    948,
    948,
    948,
    949,
    949,
    949,
    949,
    950,
    951,
    863,
    863,
    863,
    863,
    864,
    864,
    864,
    864,
    952,
    952,
    952,
    952,
    953,
    953,
    953,
    953,
    953,
    953,
    953,
    953,
    953,
    953,
    953,
    953,
    953,
    954,
    954,
    954,
    954,
    954,
    954,
    954,
    954,
    954,
    955,
    955,
    955,
    955,
    956,
    956,
    956,
    956,
    957,
    957,
    957,
    957,
    958,
    958,
    958,
    958,
    959,
    959,
    959,
    959,
    960,
    960,
    960,
    960,
    961,
    961,
    961,
    961,
    961,
    961,
    961,
    961,
    961,
    961,
    961,
    961,
    961,
    962,
    962,
    962,
    962,
    962,
    962,
    962,
    962,
    962,
    962,
    962,
    962,
    962,
    963,
    963,
    963,
    963,
    964,
    964,
    964,
    964,
    965,
    965,
    965,
    965,
    966,
    966,
    966,
    966,
    967,
    967,
    967,
    967,
    968,
    968,
    968,
    968,
    969,
    969,
    969,
    969,
    969,
    969,
    969,
    969,
    969,
    970,
    970,
    970,
    970,
    970,
    970,
    970,
    970,
    970,
    971,
    971,
    971,
    971,
    971,
    971,
    971,
    971,
    971,
    972,
    972,
    972,
    972,
    973,
    973,
    973,
    973,
    973,
    973,
    973,
    973,
    973,
    974,
    974,
    974,
    974,
    975,
    975,
    975,
    975,
    976,
    976,
    976,
    976,
    977,
    977,
    977,
    977,
    978,
    978,
    979,
    979,
    980,
    980,
    980,
    980,
    981,
    981,
    981,
    981,
    982,
    982,
    982,
    982,
    983,
    983,
    983,
    983,
    983,
    983,
    983,
    983,
    983,
    983,
    984,
    985,
    986,
    986,
    986,
    986,
    986,
    986,
    986,
    986,
    986,
    986,
    987,
    987,
    987,
    987,
    988,
    988,
    989,
    989,
    989,
    989,
    989,
    989,
    991,
    991,
    991,
    991,
    991,
    991,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    992,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    993,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    994,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    995,
    0,
    0,
    996,
    996,
    0,
    0,
    997,
    997,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    998,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    999,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1000,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    1001,
    0,
    0,
    1002,
    1002,
    0,
    0,
    1003,
    1003,
    1004,
    1004,
    1004,
    1004,
    1004,
    1004,
    1005,
    1005,
    1005,
    1005,
    1005,
    1005,
    1006,
    1006,
    1006,
    1006,
    1006,
    1006,
    1007,
    1007,
    1008,
    1008,
    1009,
    1009,
    1010,
    1010,
    1011,
    1011,
    1012,
    1012,
    1013,
    1013,
    1014,
    1014,
    1015,
    1015,
    1015,
    1015,
    1015,
    1015,
    1015,
    1015,
    1015,
    1016,
    1016,
    1016,
    1016,
    1016,
    1016,
    1016,
    1016,
    1016,
    1017,
    1017,
    1018,
    1018,
    1019,
    1019,
    1019,
    1019,
    1020,
    1020,
    1020,
    1020,
    1020,
    1020,
    1021,
    1021,
    1021,
    1021,
    1021,
    1021,
    1022,
    1022,
    1022,
    1022,
    1022,
    1022,
    1023,
    1023,
    1023,
    1023,
    1023,
    1023,
    1024,
    1024,
    1024,
    1024,
    1024,
    1024,
    1025,
    1025,
    1025,
    1025,
    1025,
    1025,
    1026,
    1026,
    1026,
    1026,
    1026,
    1026,
    1026,
    1026,
    1026,
    1026,
    1027,
    1027,
    1027,
    1027,
    1027,
    1027,
    1027,
    1027,
    1027,
    1027,
    1028,
    1028,
    1028,
    1028,
    1028,
    1028,
    1029,
    1029,
    1029,
    1029,
    1030,
    1030,
    1030,
    1030,
    1030,
    1030,
    1031,
    1031,
    1031,
    1031,
    1031,
    1031,
    1032,
    1032,
    1032,
    1032,
    1032,
    1032,
    1033,
    1033,
    1033,
    1033,
    1033,
    1033,
    1034,
    1034,
    1034,
    1034,
    1034,
    1034,
    1035,
    1035,
    1036,
    1036,
    1037,
    1037,
    1038,
    1038,
    1038,
    1039,
    1039,
    1039,
    1040,
    1040,
    1040,
    1041,
    1041,
    1041,
    1042,
    1042,
    1042,
    1043,
    1043,
    1044,
    1044,
    1045,
    1045,
    1046,
    1046,
    1047,
    1047,
    1047,
    1047,
    1048,
    1048,
    1048,
    1048,
    1049,
    1049,
    1050,
    1050,
    1051,
    1051,
    1052,
    1052,
    1053,
    1053,
    1054,
    1054,
    1055,
    1055,
    1056,
    1056,
    1057,
    1057,
    1057,
    1057,
    1058,
    1058,
    1059,
    1059,
    1060,
    1060,
    1061,
    1061,
    1061,
    1061,
    1062,
    1062,
    1062,
    1062,
    1063,
    1063,
    1064,
    1064,
    1064,
    1064,
    1065,
    1065,
    1066,
    1066,
    1067,
    1067,
    1068,
    1068,
    1069,
    1069,
    1069,
    1069,
    1069,
    1069,
    1069,
    1069,
    1069,
    1070,
    1070,
    1070,
    1070,
    1070,
    1070,
    1070,
    1070,
    1070,
    1071,
    1071,
    1072,
    1072,
    1073,
    1073,
    1074,
    1074,
    1075,
    1075,
    1076,
    1076,
    1077,
    1077,
    1078,
    1078,
    1079,
    1079,
    1080,
    1080,
    1081,
    1081,
    1082,
    1082,
    1083,
    1083,
    1083,
    1083,
    1084,
    1084,
    1084,
    1084,
    1085,
    1085,
    1085,
    1085,
    1086,
    1086,
    1086,
    1086,
    1087,
    1087,
    1087,
    1087,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1088,
    1089,
    1089,
    1089,
    1089,
    1089,
    1089,
    1089,
    1089,
    1089,
    1090,
    1090,
    1090,
    1090,
    1091,
    1091,
    1091,
    1091,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1092,
    1093,
    1093,
    1093,
    1093,
    1093,
    1093,
    1093,
    1093,
    1093,
    1094,
    1094,
    1094,
    1094,
    1095,
    1095,
    1095,
    1095,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1096,
    1097,
    1097,
    1097,
    1097,
    1097,
    1097,
    1097,
    1097,
    1097,
    1098,
    1098,
    1098,
    1098,
    1099,
    1099,
    1099,
    1099,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1100,
    1101,
    1101,
    1101,
    1101,
    1101,
    1101,
    1101,
    1101,
    1101,
    1102,
    1102,
    1102,
    1102,
    1103,
    1103,
    1103,
    1103,
    1103,
    1104,
    1104,
    1104,
    1104,
    1104,
    1105,
    1105,
    1106,
    1106,
    1106,
    1106,
    1106,
    1107,
    1107,
    1107,
    1107,
    1107,
    1108,
    1108,
    1108,
    1108,
    1108,
    1109,
    1109,
    1109,
    1109,
    1109,
    1110,
    1110,
    1110,
    1110,
    1110,
    1111,
    1111,
    1111,
    1111,
    1111,
    1112,
    1112,
    1112,
    1112,
    1112,
    1113,
    1113,
    1113,
    1113,
    1113,
    1114,
    1114,
    1114,
    1114,
    1114,
    1114,
    1114,
    1114,
    1114,
    1114,
    1115,
    1115,
    1115,
    1115,
    1115,
    1115,
    1115,
    1115,
    1115,
    1115,
    1116,
    1116,
    1116,
    1116,
    1117,
    1117,
    1117,
    1117,
    1117,
    1117,
    1117,
    1117,
    1117,
    1117,
    1118,
    1118,
    1118,
    1118,
    1118,
    1118,
    1118,
    1118,
    1118,
    1118,
    1119,
    1119,
    1119,
    1119,
    1119,
    1119,
    1119,
    1119,
    1119,
    1119,
    1120,
    1120,
    1120,
    1120,
    1120,
    1121,
    1121,
    1121,
    1121,
    1121,
    1122,
    1122,
    1122,
    1122,
    1122,
    1123,
    1123,
    1123,
    1123,
    1123,
    1124,
    1124,
    1124,
    1124,
    1124,
    1125,
    1125,
    1125,
    1125,
    1125,
    1125,
    1125,
    1125,
    1125,
    1125,
    1126,
    1126,
    1126,
    1126,
    1126,
    1126,
    1126,
    1126,
    1126,
    1126,
    1127,
    1127,
    1127,
    1127,
    1128,
    1128,
    1128,
    1128,
    1128,
    1128,
    1128,
    1128,
    1128,
    1128,
    1129,
    1129,
    1129,
    1129,
    1129,
    1129,
    1129,
    1129,
    1129,
    1129,
    1130,
    1130,
    1130,
    1130,
    1130,
    1130,
    1130,
    1130,
    1130,
    1130,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1131,
    1132,
    1132,
    1132,
    1132,
    1133,
    1133,
    1133,
    1133,
    1134,
    1134,
    1134,
    1134,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1135,
    1136,
    1136,
    1136,
    1136,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1137,
    1138,
    1138,
    1138,
    1138,
    1138,
    1138,
    1138,
    1138,
    1138,
    1139,
    1139,
    1139,
    1139,
    1139,
    1139,
    1139,
    1139,
    1139,
    1140,
    1140,
    1140,
    1140,
    1141,
    1141,
    1141,
    1142,
    1142,
    1142,
    1142,
    1142,
    1143,
    1143,
    1143,
    1143,
    1143,
    1144,
    1144,
    1144,
    1144,
    1144,
    1145,
    1145,
    1145,
    1145,
    1145,
    1146,
    1146,
    1146,
    1146,
    1147,
    1148,
    1149,
    1150,
    1151,
    1151,
    1151,
    1152,
    1152,
    1152,
    1153,
    1153,
    1153,
    1154,
    1154,
    1154,
    1155,
    1155,
    1155,
    1156,
    1156,
    1156,
    1157,
    1157,
    1157,
    1158,
    1158,
    1158,
    1159,
    1159,
    1159,
    1159,
    1160,
    1160,
    1160,
    1160,
    1160,
    1160,
    1161,
    1161,
    1161,
    1161,
    1162,
    1162,
    1162,
    1162,
    1163,
    1163,
    1163,
    1163,
    1164,
    1164,
    1164,
    1164,
    1165,
    1165,
    1165,
    1165,
    1166,
    1166,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1167,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1168,
    1169,
    1169,
    1169,
    1169,
    1169,
    1169,
    1170,
    1170,
    1170,
    1170,
    1170,
    1170,
    1171,
    1171,
    1171,
    1171,
    1171,
    1171,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1172,
    1173,
    1173,
    1173,
    1173,
    1173,
    1173,
    1173,
    1173,
    1174,
    1174,
    1174,
    1174,
    1174,
    1174,
    1175,
    1175,
    1176,
    1176,
    1176,
    1176,
    1176,
    1176,
    1177,
    1177,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1178,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1179,
    1180,
    1180,
    1180,
    1180,
    1180,
    1180,
    1181,
    1181,
    1181,
    1181,
    1181,
    1181,
    1182,
    1182,
    1182,
    1182,
    1182,
    1182,
    1183,
    1183,
    1183,
    1183,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1184,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1185,
    1186,
    1186,
    1186,
    1186,
    1187,
    1187,
    1187,
    1187,
    1188,
    1188,
    1188,
    1188,
    1189,
    1189,
    1189,
    1189,
    1190,
    1190,
    1190,
    1190,
    1191,
    1191,
    1192,
    1192,
    1193,
    1193,
    1194,
    1194,
    1195,
    1195,
    1195,
    1195,
    1196,
    1196,
    1196,
    1196,
    1197,
    1197,
    1197,
    1197,
    1197,
    1197,
    1198,
    1198,
    1198,
    1198,
    1198,
    1198,
    1199,
    1199,
    1199,
    1199,
    1200,
    1200,
    1200,
    1200,
    1201,
    1201,
    1201,
    1201,
    1201,
    1201,
    1202,
    1202,
    1202,
    1202,
    1202,
    1202,
    1203,
    1203,
    1203,
    1203,
    1204,
    1204,
    1204,
    1204,
    1204,
    1204,
    1204,
    1204,
    1204,
    1205,
    1205,
    1205,
    1205,
    1205,
    1205,
    1205,
    1205,
    1205,
    1206,
    1206,
    1206,
    1206,
    1207,
    1207,
    1208,
    1208,
    1209,
    1209,
    1210,
    1210,
    1211,
    1211,
    1211,
    1212,
    1212,
    1212,
    1213,
    1213,
    1213,
    1214,
    1214,
    1214,
    1215,
    1215,
    1215,
    1215,
    1215,
    1215,
    1215,
    1215,
    1216,
    1216,
    1216,
    1217,
    1217,
    1218,
    1218,
    1219,
    1219,
    1220,
    1220,
    1221,
    1221,
    1222,
    1222,
    1223,
    1223,
    1223,
    1224,
    1224,
    1224,
    1221,
    1221,
    1222,
    1222,
    1225,
    1225,
    1226,
    1226,
    1227,
    1227,
    1228,
    1228,
    1229,
    1229,
    1229,
    1230,
    1230,
    1230,
    1231,
    1231,
    1231,
    1232,
    1232,
    1232,
    1233,
    1233,
    1233,
    1233,
    1233,
    1233,
    1233,
    1233,
    1234,
    1234,
    1234,
    1235,
    1236,
    1237,
    1238,
    1239,
    1240,
    1241,
    1242,
    1243,
    1244,
    1245,
    1246,
    1247,
    1247,
    1247,
    1247,
    1247,
    1247,
    1248,
    1248,
    1248,
    1248,
    1248,
    1248,
    1249,
    1249,
    1249,
    1249,
    1249,
    1249,
    1250,
    1250,
    1250,
    1250,
    1250,
    1250,
    1251,
    1251,
    1251,
    1251,
    1251,
    1251,
    1251,
    1252,
    1252,
    1252,
    1252,
    1252,
    1252,
    1252,
    1253,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1254,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1255,
    1256,
    1256,
    1256,
    1256,
    1256,
    1256,
    1257,
    1257,
    1257,
    1257,
    1257,
    1257,
    1258,
    1258,
    1258,
    1258,
    1259,
    1259,
    1259,
    1259,
    253,
    253,
    253,
    253,
    254,
    254,
    254,
    254,
    1260,
    1260,
    1260,
    1260,
    1260,
    1260,
    1261,
    1261,
    1261,
    1261,
    1261,
    1261,
    1262,
    1262,
    1262,
    1262,
    1262,
    1262,
    1263,
    1263,
    1263,
    1263,
    1263,
    1263,
    865,
    865,
    865,
    865,
    866,
    866,
    866,
    866,
    1264,
    1265,
    0,
    0,
    0,
    1266,
    1267,
    0,
    0,
    0,
    1268,
    1268,
    1269,
    1269,
    1270,
    1271,
    1272,
    340,
    340,
    340,
    340,
    340,
    340,
    340,
    340,
    0,
    1273,
    1274,
    1274,
    1274,
    1274,
    1274,
    1274,
    1274,
    1274,
    1274,
    1274,
    1274,
    1274,
    1275,
    1276,
    1277,
    1278,
    1279,
    1280,
    1281,
    1282,
    1283,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    327,
    204,
    204,
    205,
    205,
    1284,
    1285,
    1286,
    1287,
    1288,
    1289,
    1290,
    1291,
    1292,
    1293,
    1294,
    1295,
    0,
];

pub const DISASMX86_FIRST_OP_MAP: [u8; 6268] = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    19,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    19,
    35,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    18,
    18,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    17,
    28,
    28,
    0,
    0,
    0,
    32,
    32,
    32,
    33,
    33,
    33,
    49,
    49,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    11,
    11,
    17,
    17,
    28,
    28,
    0,
    0,
    0,
    32,
    32,
    32,
    33,
    33,
    33,
    49,
    49,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    19,
    35,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    106,
    106,
    0,
    0,
    0,
    106,
    106,
    106,
    0,
    106,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    35,
    19,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    19,
    19,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
];

pub const DISASMX86_LAST_OP_MAP: [u8; 6268] = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    0,
    18,
    18,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    3,
    0,
    19,
    0,
    2,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    17,
    17,
    28,
    28,
    0,
    0,
    0,
    32,
    32,
    32,
    33,
    33,
    33,
    49,
    49,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    11,
    11,
    17,
    17,
    28,
    28,
    0,
    0,
    0,
    32,
    32,
    32,
    33,
    33,
    33,
    49,
    49,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    19,
    35,
    3,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    106,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    19,
    35,
    19,
    35,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
];

pub const REGSIZE32: [u8; 234] = [
    0,  
    1,  // ah
    1,  // al
    2,  // ax
    1,  // bh
    1,  // bl
    2,  // bp
    1,  // bpl
    2,  // bx
    1,  // ch
    1,  // cl
    2,  // cs
    2,  // cx
    1,  // dh
    2,  // di
    1,  // dil
    1,  // dl
    2,  // ds
    2,  // dx
    4,  // eax
    4,  // ebp
    4,  // ebx
    4,  // ecx
    4,  // edi
    4,  // edx
    4,  // flags
    4,  // eip
    4,  // eiz
    2,  // es
    4,  // esi
    4,  // esp
    10, // fpsw
    2,  // fs
    2,  // gs
    2,  // ip
    8,  // rax
    8,  // rbp
    8,  // rbx
    8,  // rcx
    8,  // rdi
    8,  // rdx
    8,  // rip
    8,  // riz
    8,  // rsi
    8,  // rsp
    2,  // si
    1,  // sil
    2,  // sp
    1,  // spl
    2,  // ss
    4,  // cr0
    4,  // cr1
    4,  // cr2
    4,  // cr3
    4,  // cr4
    8,  // cr5
    8,  // cr6
    8,  // cr7
    8,  // cr8
    8,  // cr9
    8,  // cr10
    8,  // cr11
    8,  // cr12
    8,  // cr13
    8,  // cr14
    8,  // cr15
    4,  // dr0
    4,  // dr1
    4,  // dr2
    4,  // dr3
    4,  // dr4
    4,  // dr5
    4,  // dr6
    4,  // dr7
    10, // fp0
    10, // fp1
    10, // fp2
    10, // fp3
    10, // fp4
    10, // fp5
    10, // fp6
    10, // fp7
    2,  // k0
    2,  // k1
    2,  // k2
    2,  // k3
    2,  // k4
    2,  // k5
    2,  // k6
    2,  // k7
    8,  // mm0
    8,  // mm1
    8,  // mm2
    8,  // mm3
    8,  // mm4
    8,  // mm5
    8,  // mm6
    8,  // mm7
    8,  // r8
    8,  // r9
    8,  // r10
    8,  // r11
    8,  // r12
    8,  // r13
    8,  // r14
    8,  // r15
    10, // st0
    10, // st1
    10, // st2
    10, // st3
    10, // st4
    10, // st5
    10, // st6
    10, // st7
    16, // xmm0
    16, // xmm1
    16, // xmm2
    16, // xmm3
    16, // xmm4
    16, // xmm5
    16, // xmm6
    16, // xmm7
    16, // xmm8
    16, // xmm9
    16, // xmm10
    16, // xmm11
    16, // xmm12
    16, // xmm13
    16, // xmm14
    16, // xmm15
    16, // xmm16
    16, // xmm17
    16, // xmm18
    16, // xmm19
    16, // xmm20
    16, // xmm21
    16, // xmm22
    16, // xmm23
    16, // xmm24
    16, // xmm25
    16, // xmm26
    16, // xmm27
    16, // xmm28
    16, // xmm29
    16, // xmm30
    16, // xmm31
    32, // ymm0
    32, // ymm1
    32, // ymm2
    32, // ymm3
    32, // ymm4
    32, // ymm5
    32, // ymm6
    32, // ymm7
    32, // ymm8
    32, // ymm9
    32, // ymm10
    32, // ymm11
    32, // ymm12
    32, // ymm13
    32, // ymm14
    32, // ymm15
    32, // ymm16
    32, // ymm17
    32, // ymm18
    32, // ymm19
    32, // ymm20
    32, // ymm21
    32, // ymm22
    32, // ymm23
    32, // ymm24
    32, // ymm25
    32, // ymm26
    32, // ymm27
    32, // ymm28
    32, // ymm29
    32, // ymm30
    32, // ymm31
    64, // zmm0
    64, // zmm1
    64, // zmm2
    64, // zmm3
    64, // zmm4
    64, // zmm5
    64, // zmm6
    64, // zmm7
    64, // zmm8
    64, // zmm9
    64, // zmm10
    64, // zmm11
    64, // zmm12
    64, // zmm13
    64, // zmm14
    64, // zmm15
    64, // zmm16
    64, // zmm17
    64, // zmm18
    64, // zmm19
    64, // zmm20
    64, // zmm21
    64, // zmm22
    64, // zmm23
    64, // zmm24
    64, // zmm25
    64, // zmm26
    64, // zmm27
    64, // zmm28
    64, // zmm29
    64, // zmm30
    64, // zmm31
    1,  // r8b
    1,  // r9b
    1,  // r10b
    1,  // r11b
    1,  // r12b
    1,  // r13b
    1,  // r14b
    1,  // r15b
    4,  // r8d
    4,  // r9d
    4,  // r10d
    4,  // r11d
    4,  // r12d
    4,  // r13d
    4,  // r14d
    4,  // r15d
    2,  // r8w
    2,  // r9w
    2,  // r10w
    2,  // r11w
    2,  // r12w
    2,  // r13w
    2,  // r14w
    2,  // r15w
];

pub const REGSIZE64: [u8; 234] = [
    0,  
    1,  // ah
    1,  // al
    2,  // ax
    1,  // bh
    1,  // bl
    2,  // bp
    1,  // bpl
    2,  // bx
    1,  // ch
    1,  // cl
    2,  // cs
    2,  // cx
    1,  // dh
    2,  // di
    1,  // dil
    1,  // dl
    2,  // ds
    2,  // dx
    4,  // eax
    4,  // ebp
    4,  // ebx
    4,  // ecx
    4,  // edi
    4,  // edx
    8,  // flags
    4,  // eip
    4,  // eiz
    2,  // es
    4,  // esi
    4,  // esp
    10, // fpsw
    2,  // fs
    2,  // gs
    2,  // ip
    8,  // rax
    8,  // rbp
    8,  // rbx
    8,  // rcx
    8,  // rdi
    8,  // rdx
    8,  // rip
    8,  // riz
    8,  // rsi
    8,  // rsp
    2,  // si
    1,  // sil
    2,  // sp
    1,  // spl
    2,  // ss
    8,  // cr0
    8,  // cr1
    8,  // cr2
    8,  // cr3
    8,  // cr4
    8,  // cr5
    8,  // cr6
    8,  // cr7
    8,  // cr8
    8,  // cr9
    8,  // cr10
    8,  // cr11
    8,  // cr12
    8,  // cr13
    8,  // cr14
    8,  // cr15
    8,  // dr0
    8,  // dr1
    8,  // dr2
    8,  // dr3
    8,  // dr4
    8,  // dr5
    8,  // dr6
    8,  // dr7
    10, // fp0
    10, // fp1
    10, // fp2
    10, // fp3
    10, // fp4
    10, // fp5
    10, // fp6
    10, // fp7
    2,  // k0
    2,  // k1
    2,  // k2
    2,  // k3
    2,  // k4
    2,  // k5
    2,  // k6
    2,  // k7
    8,  // mm0
    8,  // mm1
    8,  // mm2
    8,  // mm3
    8,  // mm4
    8,  // mm5
    8,  // mm6
    8,  // mm7
    8,  // r8
    8,  // r9
    8,  // r10
    8,  // r11
    8,  // r12
    8,  // r13
    8,  // r14
    8,  // r15
    10, // st0
    10, // st1
    10, // st2
    10, // st3
    10, // st4
    10, // st5
    10, // st6
    10, // st7
    16, // xmm0
    16, // xmm1
    16, // xmm2
    16, // xmm3
    16, // xmm4
    16, // xmm5
    16, // xmm6
    16, // xmm7
    16, // xmm8
    16, // xmm9
    16, // xmm10
    16, // xmm11
    16, // xmm12
    16, // xmm13
    16, // xmm14
    16, // xmm15
    16, // xmm16
    16, // xmm17
    16, // xmm18
    16, // xmm19
    16, // xmm20
    16, // xmm21
    16, // xmm22
    16, // xmm23
    16, // xmm24
    16, // xmm25
    16, // xmm26
    16, // xmm27
    16, // xmm28
    16, // xmm29
    16, // xmm30
    16, // xmm31
    32, // ymm0
    32, // ymm1
    32, // ymm2
    32, // ymm3
    32, // ymm4
    32, // ymm5
    32, // ymm6
    32, // ymm7
    32, // ymm8
    32, // ymm9
    32, // ymm10
    32, // ymm11
    32, // ymm12
    32, // ymm13
    32, // ymm14
    32, // ymm15
    32, // ymm16
    32, // ymm17
    32, // ymm18
    32, // ymm19
    32, // ymm20
    32, // ymm21
    32, // ymm22
    32, // ymm23
    32, // ymm24
    32, // ymm25
    32, // ymm26
    32, // ymm27
    32, // ymm28
    32, // ymm29
    32, // ymm30
    32, // ymm31
    64, // zmm0
    64, // zmm1
    64, // zmm2
    64, // zmm3
    64, // zmm4
    64, // zmm5
    64, // zmm6
    64, // zmm7
    64, // zmm8
    64, // zmm9
    64, // zmm10
    64, // zmm11
    64, // zmm12
    64, // zmm13
    64, // zmm14
    64, // zmm15
    64, // zmm16
    64, // zmm17
    64, // zmm18
    64, // zmm19
    64, // zmm20
    64, // zmm21
    64, // zmm22
    64, // zmm23
    64, // zmm24
    64, // zmm25
    64, // zmm26
    64, // zmm27
    64, // zmm28
    64, // zmm29
    64, // zmm30
    64, // zmm31
    1,  // r8b
    1,  // r9b
    1,  // r10b
    1,  // r11b
    1,  // r12b
    1,  // r13b
    1,  // r14b
    1,  // r15b
    4,  // r8d
    4,  // r9d
    4,  // r10d
    4,  // r11d
    4,  // r12d
    4,  // r13d
    4,  // r14d
    4,  // r15d
    2,  // r8w
    2,  // r9w
    2,  // r10w
    2,  // r11w
    2,  // r12w
    2,  // r13w
    2,  // r14w
    2,  // r15w
];

pub fn print_immediate_size(_size: u8)->String{
    match _size{
        1=>{return "byte ptr ".to_string()},
        2=>{return "word ptr ".to_string()},
        4=>{return "dword ptr ".to_string()},
        8=>{return "qword ptr ".to_string()},
        _=>{},
    }
    return String::new();
}
pub fn print_immediate(_imm: i64)->String{
    return String::new();
}
pub fn print_register(_reg: usize)->String{
    if _reg > 0 && (_reg as usize) < DISASMX86_REG_MAP.len(){
        return DISASMX86_REG_MAP[_reg as usize].to_string();
    }
    return String::new();
}

pub fn print_opcode(_index: usize)->&'static str{
    if _index > 0 && _index < DISASMX86_OPLOOKUP_MAP.len()
    {
        let op_index = DISASMX86_OPLOOKUP_MAP[_index] as usize;
        if op_index > 0 && op_index < DISASMX86_OP_MAP.len()
        {
            return DISASMX86_OP_MAP[op_index];
        }
    }
    return "";
}

pub enum SSECCx86 {
    INVALID = 0, // Uninitialized.
    EQ,
    LT,
    LE,
    UNORD,
    NEQ,
    NLT,
    NLE,
    ORD,
    EQUQ,
    NGE,
    NGT,
    FALSE,
    NEQOQ,
    GE,
    GT,
    TRUE,
}

pub enum AVXCCx86 {
    INVALID = 0, // Uninitialized.
    EQ,
    LT,
    LE,
    UNORD,
    NEQ,
    NLT,
    NLE,
    ORD,
    EQUQ,
    NGE,
    NGT,
    FALSE,
    NEQOQ,
    GE,
    GT,
    TRUE,
    EQOS,
    LTOQ,
    LEOQ,
    UNORDS,
    NEQUS,
    NLTUQ,
    NLEUQ,
    ORDS,
    EQUS,
    NGEUQ,
    NGTUQ,
    FALSEOS,
    NEQOS,
    GEOQ,
    GTOQ,
    TRUEUS,
}

pub enum AVXRMx86 {
    INVALID = 0, // Uninitialized.
    RN,  // Round to nearest
    RD,  // Round down
    RU,  // Round up
    RZ,  // Round toward zero
}

fn set_sse_cc<T: ArchDetail>(
    _detail: &mut T,
    _imm: i64)
{
    let sse_value = 
    match _imm & 7{
        0=>SSECCx86::EQ as u8,
        1=>SSECCx86::LT as u8,
        2=>SSECCx86::LE as u8,
        3=>SSECCx86::UNORD as u8,
        4=>SSECCx86::NEQ as u8,
        5=>SSECCx86::NLT as u8,
        6=>SSECCx86::NLE as u8,
        7=>SSECCx86::ORD as u8,
        8=>SSECCx86::EQUQ as u8,
        9=>SSECCx86::NGE as u8,
        0xa=>SSECCx86::NGT as u8,
        0xb=>SSECCx86::FALSE as u8,
        0xc=>SSECCx86::NEQOQ as u8,
        0xd=>SSECCx86::GE as u8,
        0xe=>SSECCx86::GT as u8,
        0xf=>SSECCx86::TRUE as u8,
        _=>0,
    };
    *_detail.sse_cc() = sse_value;
}

fn set_avx_cc<T: ArchDetail>(
    _detail: &mut T,
    _imm: i64)
{
    let avx_value = 
    match _imm & 0x1f{
        0=>AVXCCx86::EQ as u8,
        1=>AVXCCx86::LT as u8,
        2=>AVXCCx86::LE as u8,
        3=>AVXCCx86::UNORD as u8,
        4=>AVXCCx86::NEQ as u8,
        5=>AVXCCx86::NLT as u8,
        6=>AVXCCx86::NLE as u8,
        7=>AVXCCx86::ORD as u8,
        8=>AVXCCx86::EQUQ as u8,
        9=>AVXCCx86::NGE as u8,
        0xa=>AVXCCx86::NGT as u8,
        0xb=>AVXCCx86::FALSE as u8,
        0xc=>AVXCCx86::NEQOQ as u8,
        0xd=>AVXCCx86::GE as u8,
        0xe=>AVXCCx86::GT as u8,
        0xf=>AVXCCx86::TRUE as u8,
        0x10=>AVXCCx86::EQOS as u8,
        0x11=>AVXCCx86::LTOQ as u8,
        0x12=>AVXCCx86::LEOQ as u8,
        0x13=>AVXCCx86::UNORDS as u8,
        0x14=>AVXCCx86::NEQUS as u8,
        0x15=>AVXCCx86::NLTUQ as u8,
        0x16=>AVXCCx86::NLEUQ as u8,
        0x17=>AVXCCx86::ORDS as u8,
        0x18=>AVXCCx86::EQUS as u8,
        0x19=>AVXCCx86::NGEUQ as u8,
        0x1a=>AVXCCx86::NGTUQ as u8,
        0x1b=>AVXCCx86::FALSEOS as u8,
        0x1c=>AVXCCx86::NEQOS as u8,
        0x1d=>AVXCCx86::GEOQ as u8,
        0x1e=>AVXCCx86::GTOQ as u8,
        0x1f=>AVXCCx86::TRUEUS as u8,
        _=>0,
    };
    *_detail.avx_cc() = avx_value;
}

/// AVX_RM
fn set_rounding_cc<T: ArchDetail>(
    _detail: &mut T,
    _imm: u8)
{
    let avx_value = 
    match _imm & 0x3{
        0=>AVXRMx86::RN as u8,
        1=>AVXRMx86::RD as u8,
        2=>AVXRMx86::RU as u8,
        3=>AVXRMx86::RZ as u8,
         _=>0,
    };
    *_detail.avx_rm() = avx_value;
}
   
/// pc relative immediate
fn handle_pcrel_immediates(_instr: &Instructionx86, _immediate: &mut i64) -> bool{
    disasm_debug!("handle_pcrel_immediates()");
    let _opcode = _instr.instr_index as u32;
    let is_pcrel_opcode = match _opcode{
        o if o == Instructionsx86::CALL64pcrel32 as u32=>true,
        o if o == Instructionsx86::CALLpcrel16 as u32=>true,
        o if o == Instructionsx86::CALLpcrel32 as u32=>true,
        o if o == Instructionsx86::EHSjLjSetup as u32=>true,
        o if o == Instructionsx86::JAE1 as u32=>true,
        o if o == Instructionsx86::JAE2 as u32=>true,
        o if o == Instructionsx86::JAE4 as u32=>true,
        o if o == Instructionsx86::JA1 as u32=>true,
        o if o == Instructionsx86::JA2 as u32=>true,
        o if o == Instructionsx86::JA4 as u32=>true,
        o if o == Instructionsx86::JBE1 as u32=>true,
        o if o == Instructionsx86::JBE2 as u32=>true,
        o if o == Instructionsx86::JBE4 as u32=>true,
        o if o == Instructionsx86::JB1 as u32=>true,
        o if o == Instructionsx86::JB2 as u32=>true,
        o if o == Instructionsx86::JB4 as u32=>true,
        o if o == Instructionsx86::JCXZ as u32=>true,
        o if o == Instructionsx86::JECXZ32 as u32=>true,
        o if o == Instructionsx86::JECXZ64 as u32=>true,
        o if o == Instructionsx86::JE1 as u32=>true,
        o if o == Instructionsx86::JE2 as u32=>true,
        o if o == Instructionsx86::JE4 as u32=>true,
        o if o == Instructionsx86::JGE1 as u32=>true,
        o if o == Instructionsx86::JGE2 as u32=>true,
        o if o == Instructionsx86::JGE4 as u32=>true,
        o if o == Instructionsx86::JG1 as u32=>true,
        o if o == Instructionsx86::JG2 as u32=>true,
        o if o == Instructionsx86::JG4 as u32=>true,
        o if o == Instructionsx86::JLE1 as u32=>true,
        o if o == Instructionsx86::JLE2 as u32=>true,
        o if o == Instructionsx86::JLE4 as u32=>true,
        o if o == Instructionsx86::JL1 as u32=>true,
        o if o == Instructionsx86::JL2 as u32=>true,
        o if o == Instructionsx86::JL4 as u32=>true,
        o if o == Instructionsx86::JMP1 as u32=>true,
        o if o == Instructionsx86::JMP2 as u32=>true,
        o if o == Instructionsx86::JMP4 as u32=>true,
        o if o == Instructionsx86::JNE1 as u32=>true,
        o if o == Instructionsx86::JNE2 as u32=>true,
        o if o == Instructionsx86::JNE4 as u32=>true,
        o if o == Instructionsx86::JNO1 as u32=>true,
        o if o == Instructionsx86::JNO2 as u32=>true,
        o if o == Instructionsx86::JNO4 as u32=>true,
        o if o == Instructionsx86::JNP1 as u32=>true,
        o if o == Instructionsx86::JNP2 as u32=>true,
        o if o == Instructionsx86::JNP4 as u32=>true,
        o if o == Instructionsx86::JNS1 as u32=>true,
        o if o == Instructionsx86::JNS2 as u32=>true,
        o if o == Instructionsx86::JNS4 as u32=>true,
        o if o == Instructionsx86::JO1 as u32=>true,
        o if o == Instructionsx86::JO2 as u32=>true,
        o if o == Instructionsx86::JO4 as u32=>true,
        o if o == Instructionsx86::JP1 as u32=>true,
        o if o == Instructionsx86::JP2 as u32=>true,
        o if o == Instructionsx86::JP4 as u32=>true,
        o if o == Instructionsx86::JRCXZ as u32=>true,
        o if o == Instructionsx86::JS1 as u32=>true,
        o if o == Instructionsx86::JS2 as u32=>true,
        o if o == Instructionsx86::JS4 as u32=>true,
        o if o == Instructionsx86::LOOP as u32=>true,
        o if o == Instructionsx86::LOOPE as u32=>true,
        o if o == Instructionsx86::LOOPNE as u32=>true,
        o if o == Instructionsx86::TAILJMPd as u32=>true,
        o if o == Instructionsx86::TAILJMPd64 as u32=>true,
        o if o == Instructionsx86::W64ALLOCA as u32=>true,
        o if o == Instructionsx86::XBEGIN4 as u32=>true,
        _=>false,
    };
    // modify
    if is_pcrel_opcode{
        let mut imm: i64 = *_immediate as i64 +_instr.length as i64 + _instr.cinfo.offset as i64;
        if _instr.mode != Modex86::Mode64{
            imm = imm & 0xffffffff;
        }
        if _instr.mode == Modex86::Mode16 
        && _opcode != Instructionsx86::CALLpcrel32 as u32 
        && _opcode != Instructionsx86::JMP4 as u32 {
            imm = imm & 0xffff;
        }
        if _instr.mode == Modex86::Mode16 
        && _instr.prefix.kind[PrefixMaskx86::OPSize as usize] == 0
        && _opcode != Instructionsx86::JMP4 as u32{
            imm = imm & 0xffff;
        }
        if _opcode == Instructionsx86::CALLpcrel16 as u32 || _opcode == Instructionsx86::JMP2 as u32{
            imm = imm & 0xffff;
        }
        *_immediate = imm;
        return true;
    }
    return false;
}     

pub fn build_src_mem_operand<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _opcode: &u32,
    _segment_reg: u8,
    _base_reg: u8,
    _index_reg: u8,
    _offset_imm: i64,
    _scale_imm: i32,
    _size: u8,
    )
{
    disasm_debug!("build_mem_operand()");
    let mut mem_operand = String::new();
    if *_detail.op_count() >= 8 { return; }
    let index: usize = *_detail.op_count();
    _detail.operands()[index].op_type = InstrOpTypex86::Mem;
    _detail.operands()[index].size = _size;

     if _segment_reg != 0 {
        _detail.operands()[index].mem.segment=_segment_reg as i32;
        mem_operand = format!("{}:", print_register(_segment_reg as usize));
    }
    if _base_reg != 0 {
        _detail.operands()[index].mem.base=_base_reg as i32;
        mem_operand = format!("{}[{}", mem_operand, print_register(_base_reg as usize));
    }
    if _index_reg != 0 {
        _detail.operands()[index].mem.index=_index_reg as i32;
        mem_operand = format!("{}+{}", mem_operand, print_register(_index_reg as usize));
    }
    _detail.operands()[index].mem.displacement = _offset_imm;
    if _base_reg == 0 && _index_reg == 0 {
        match *_detail.address_size() {
            1=>{
                mem_operand = format!("{}[0x{:x}", mem_operand, _offset_imm as i8);
            },
            2=>{
                mem_operand = format!("{}[0x{:x}", mem_operand, _offset_imm as i16);
            },
            4=>{
                mem_operand = format!("{}[0x{:x}", mem_operand, _offset_imm as i32);
            },
            8=>{
                mem_operand = format!("{}[0x{:x}", mem_operand, _offset_imm as i64);
            },
            _=>{},
        } 
    } else if _offset_imm != 0 {
        let mut accumulator = "+";
        if _offset_imm < 0 {
            accumulator = "-";
        }
        match *_detail.address_size() {
            1=>{
                
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u8);
            },
            2=>{
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u16);
            },
            4=>{
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u32);
            },
            8=>{
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u64);
            },
            _=>{},
        } 
    }
    _detail.operands()[index].mem.scale = _scale_imm;
    if _scale_imm > 1 {
        mem_operand = format!("{}*0x{:x}", mem_operand, _scale_imm);
    }
    mem_operand = format!("{}]", mem_operand);
    *_detail.op_count()+=1;
    // print
    if index != 0 && DISASMX86_FIRST_OP_MAP[*_opcode as usize] == 0{
        // swap if no prior operand
        let temp = _detail.operands()[index];
        _detail.operands()[index] = _detail.operands()[0];
        _detail.operands()[0]=temp;
        *_nmemonic = format!("{}, {}", mem_operand, *_nmemonic);
        let last = _nmemonic.len()-2;
        _nmemonic.truncate(last);
    } else {
        *_nmemonic = format!("{}{}", *_nmemonic, mem_operand);
    }
}

pub fn build_mem_operand<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _segment_reg: u8,
    _base_reg: u8,
    _index_reg: u8,
    _offset_imm: i64,
    _scale_imm: i32,
    _size: u8,
    )
{
    disasm_debug!("build_mem_operand()");
    let mut mem_operand = String::new();
    if *_detail.op_count() >= 8 { return; }
    let index: usize = *_detail.op_count();
    _detail.operands()[index].op_type = InstrOpTypex86::Mem;
    _detail.operands()[index].size = _size;

    if _segment_reg != 0 {
        _detail.operands()[index].mem.segment=_segment_reg as i32;
        mem_operand = format!("{}:", print_register(_segment_reg as usize));
    }
    mem_operand = format!("{}[", mem_operand);
    if _base_reg != 0 {
        _detail.operands()[index].mem.base=_base_reg as i32;
        mem_operand = format!("{}{}", mem_operand, print_register(_base_reg as usize));
    }
    if _index_reg != 0 {

        _detail.operands()[index].mem.index=_index_reg as i32;
        if _base_reg == 0 {
            mem_operand = format!("{}{}", mem_operand, print_register(_index_reg as usize));
        } else {
            mem_operand = format!("{}+{}", mem_operand, print_register(_index_reg as usize));
        }   
    }
    _detail.operands()[index].mem.scale = _scale_imm;
    if _scale_imm != 0 && _index_reg !=0 {
        mem_operand = format!("{}*0x{:x}", mem_operand, _scale_imm);
    }
    _detail.operands()[index].mem.displacement = _offset_imm;
    if _base_reg == 0 && _index_reg == 0 {
        match *_detail.address_size() {
            1=>{
                mem_operand = format!("{}0x{:x}", mem_operand, _offset_imm as i8);
            },
            2=>{
                mem_operand = format!("{}0x{:x}", mem_operand, _offset_imm as i16);
            },
            4=>{
                mem_operand = format!("{}0x{:x}", mem_operand, _offset_imm as i32);
            },
            8=>{
                mem_operand = format!("{}0x{:x}", mem_operand, _offset_imm as i64);
            },
            _=>{},
        } 
    } else if _offset_imm != 0 {
        let mut accumulator = "+";
        if _offset_imm < 0 {
            accumulator = "-";
        }
        match *_detail.address_size() {
            1=>{
                
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u8);
            },
            2=>{
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u16);
            },
            4=>{
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u32);
            },
            8=>{
                mem_operand = format!("{}{}0x{:x}", mem_operand, accumulator, _offset_imm.abs() as u64);
            },
            _=>{},
        } 
    }
    
    mem_operand = format!("{}]", mem_operand);
    *_detail.op_count()+=1;
    // print
    *_nmemonic = format!("{}{}", *_nmemonic, mem_operand);
}

pub fn build_register<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _reg: u8,
    _size: u8)
{
    disasm_debug!("build_register() reg: {:?}", _reg);
    if *_detail.op_count() >= 8 ||  _reg == 0 { return; }
    let index: usize = *_detail.op_count();
    _detail.operands()[index].op_type = InstrOpTypex86::Reg;
    _detail.operands()[index].reg = _reg;
    let reg_size = match _detail.address_size(){
        8=>{REGSIZE64[_reg as usize]},
        _=>{REGSIZE32[_reg as usize]},
    };
    _detail.operands()[index].size = reg_size;
    *_detail.op_count()+=1;
    disasm_debug!("\treg: {:?}", _reg);
    // print
    *_nmemonic = format!("{}{}", *_nmemonic, print_register(_reg as usize));
}

pub fn build_immediate<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _imm: i64,
    _size: u8,
    _mode: &Modex86,
    _print: bool,
    _pc_relative: bool)
{
    disasm_debug!("build_immediate()");
    if *_detail.op_count() >= 8 { return; }
    let index: usize = *_detail.op_count();
    _detail.operands()[index].op_type = InstrOpTypex86::Imm;
    _detail.operands()[index].imm = _imm;
    _detail.operands()[index].size = _size;
    _detail.operands()[index].pc_relative_addr=_pc_relative;

    *_detail.op_count()+=1;
    if _print{
        match _size {
            1=>{
                *_nmemonic = format!("{}0x{:x}", *_nmemonic, _imm as i8);
            },
            2=>{
                *_nmemonic = format!("{}0x{:x}", *_nmemonic, _imm as i16);
            },
            4=>{
                *_nmemonic = format!("{}0x{:x}", *_nmemonic, _imm as i32);
            },
            8=>{
                *_nmemonic = format!("{}0x{:x}", *_nmemonic, _imm);
            },
            _=>{},
        } 
    }
}

pub fn build_immediates<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _imm: i64,
    _operand_pair: &OperandSetPair,
    _instr: &Instructionx86)->bool
{
    disasm_debug!("build_immediates()");
    let mut _immediate = _imm;
    let mut immedate_size: u8 = _instr.size.immediate;
    match _operand_pair.encodetype{
        OperandTypex86::TYPERELv=>{
            match _instr.size.displacement{
                1=>{
                    if (_immediate & 0x80) != 0{
                        _immediate |= !(0xff);
                    }
                },
                2=>{
                    if (_immediate & 0x8000) != 0{
                        _immediate |= !(0xffff);
                    }
                },
                4=>{
                    if (_immediate & 0x80000000) != 0{
                        _immediate |= !(0xffffffff);
                    }
                },
                8=>{ /* Do nothing */ },
                _=>{},
            }
        },
        OperandTypex86::TYPEIMM8 | 
        OperandTypex86::TYPEIMM16 |
        OperandTypex86::TYPEIMM32 |
        OperandTypex86::TYPEIMM64 |
        OperandTypex86::TYPEIMMv=>{
            let opcode = _instr.instr_index as u32;

            immedate_size = match _operand_pair.encodetype {
                OperandTypex86::TYPEIMM8=>1u8,
                OperandTypex86::TYPEIMM16=>2u8,
                OperandTypex86::TYPEIMM32=>4u8,
                OperandTypex86::TYPEIMM64=>8u8,
                _=>_instr.size.immediate,
            };
            
            match _operand_pair.encoding{
                OperandEncodingx86::ENCODINGIB=>{
                    let is_valid_opcode: bool = match opcode{
                        o if o == Instructionsx86::INT as u32=>false,
                        o if o == Instructionsx86::BLENDPSrri as u32=>false,
                        o if o == Instructionsx86::BLENDPDrri as u32=>false,
                        o if o == Instructionsx86::PBLENDWrri as u32=>false,
                        o if o == Instructionsx86::MPSADBWrri as u32=>false,
                        o if o == Instructionsx86::DPPSrri as u32=>false,
                        o if o == Instructionsx86::DPPDrri as u32=>false,
                        o if o == Instructionsx86::INSERTPSrr as u32=>false,
                        o if o == VInstructionsx86::VBLENDPSYrri as u32=>false,
                        o if o == VInstructionsx86::VBLENDPSYrmi as u32=>false,
                        o if o == VInstructionsx86::VBLENDPDYrri as u32=>false,
                        o if o == VInstructionsx86::VBLENDPDYrmi as u32=>false,
                        o if o == VInstructionsx86::VPBLENDWrri as u32=>false,
                        o if o == VInstructionsx86::VMPSADBWrri as u32=>false,
                        o if o == VInstructionsx86::VDPPSYrri as u32=>false,
                        o if o == VInstructionsx86::VDPPSYrmi as u32=>false,
                        o if o == VInstructionsx86::VDPPDrri as u32=>false,
                        o if o == VInstructionsx86::VINSERTPSrr as u32=>false,
                        _=>true,
                    };
                    if is_valid_opcode{
                        if (_immediate & 0x80) != 0{
                            _immediate |= !(0xff);
                        }
                    }
                },
                OperandEncodingx86::ENCODINGIW=>{
                    if (_immediate & 0x8000) != 0{
                        _immediate |= !(0xffff);
                    }
                },
                OperandEncodingx86::ENCODINGID=>{
                    if (_immediate & 0x80000000) != 0{
                        _immediate |= !(0xffffffff);
                    }
                },
                OperandEncodingx86::ENCODINGIO=>{
                    /* Do nothing */
                },
                _=>{},
            }
        },
        OperandTypex86::TYPEIMM3=>{
            let opcode = _instr.instr_index as u32;
            if _immediate <= 0xf {
                match opcode{
                    //CMPPD, CMPPS, CMPSD, CMPSS
                    550..=553 | //CMPPD,
                    554..=557 | //CMPPS,
                    559..=562 | //CMPSD
                    565..=568 // CMPSS
                    =>set_sse_cc(_detail, _immediate),
                    _=>{},
                }
            }
        },
        OperandTypex86::TYPEIMM5=>{
            let opcode = _instr.instr_index as u32;
            if _immediate <= 0x1f {
                if opcode == VInstructionsx86::VCMPPDrmi as u32||
                opcode == VInstructionsx86::VCMPPDrri as u32||
                opcode == VInstructionsx86::VCMPPSrmi as u32||
                opcode == VInstructionsx86::VCMPPSrri as u32||
                opcode == VInstructionsx86::VCMPSDrm as u32||
                opcode == VInstructionsx86::VCMPSDrr as u32||
                opcode == VInstructionsx86::VCMPSSrm as u32||
                opcode == VInstructionsx86::VCMPSSrr as u32||
                opcode == VInstructionsx86::VCMPPDYrmi as u32||
                opcode == VInstructionsx86::VCMPPDYrri as u32||
                opcode == VInstructionsx86::VCMPPSYrmi as u32||
                opcode == VInstructionsx86::VCMPPSYrri as u32||
                opcode == VInstructionsx86::VCMPPDZrmi as u32||
                opcode == VInstructionsx86::VCMPPDZrri as u32||
                opcode == VInstructionsx86::VCMPPSZrmi as u32||
                opcode == VInstructionsx86::VCMPPSZrri as u32||
                opcode == VInstructionsx86::VCMPSDZrm as u32||
                opcode == VInstructionsx86::VCMPSDZrr as u32||
                opcode == VInstructionsx86::VCMPSSZrm as u32||
                opcode == VInstructionsx86::VCMPSSZrr as u32
                { 
                    set_avx_cc(_detail, _immediate);
                }
                if opcode == VInstructionsx86::VCVTDQ2PSZrrb as u32 || 
                opcode == VInstructionsx86::VCVTPD2DQZrrb as u32 || 
                opcode == VInstructionsx86::VCVTPD2PSZrrb as u32 ||
                opcode == VInstructionsx86::VCVTPD2UDQZrrb as u32 ||
                opcode == VInstructionsx86::VCVTPS2DQZrrb as u32 ||
                opcode == VInstructionsx86::VCVTPS2UDQZrrb as u32 ||
                opcode == VInstructionsx86::VCVTUDQ2PSZrrb as u32
                {
                    set_rounding_cc(_detail, _immediate as u8);
                }
            }
        },
        OperandTypex86::TYPEXMM32=>{
            build_register(
                _detail, 
                _nmemonic, 
                Registersx86::XMM0 as u8 + (_immediate >> 4) as u8,
                4);
            return true;
        },
        OperandTypex86::TYPEXMM64=>{
            build_register(
                _detail, 
                _nmemonic, 
                Registersx86::XMM0 as u8 + (_immediate >> 4) as u8,
                8);
            return true;
        },
        OperandTypex86::TYPEXMM128=>{
            build_register(
                _detail, 
                _nmemonic, 
                Registersx86::XMM0 as u8 + (_immediate >> 4) as u8,
                16);
            return true;
        },
        OperandTypex86::TYPEXMM256=>{
            build_register(
                _detail, 
                _nmemonic,
                Registersx86::YMM0 as u8 + (_immediate >> 4) as u8,
                32);
            return true;
        },
        OperandTypex86::TYPEXMM512=>{
            build_register(
                _detail, 
                _nmemonic,
                Registersx86::ZMM0 as u8 + (_immediate >> 4) as u8,
                64);
            return true;
        },
        OperandTypex86::TYPEREL8=>{
            if (_immediate & 0x80) != 0 {
                _immediate |= !(0xff);
            }
        },
        OperandTypex86::TYPEREL32 | 
        OperandTypex86::TYPEREL64=>{
            if (_immediate & 0x80000000) != 0{
                _immediate |= !(0xffffffff);
            }
        },
        _=>{},
    }

    match _operand_pair.encodetype{
        OperandTypex86::TYPEMOFFS8 |
        OperandTypex86::TYPEMOFFS16 |
        OperandTypex86::TYPEMOFFS32 |
        OperandTypex86::TYPEMOFFS64=>{
            build_mem_operand(
                _detail,
                _nmemonic,
                _instr.prefix.segment,
                0,
                0,
                _immediate,
                0,
                _instr.operand_size as u8);
            //*_nmemonic= format!("{}, ", _nmemonic);
            return true;
        },
        _=>{},
    }
    let mut is_pcrel_opcode = false;
    
    if handle_pcrel_immediates(_instr, &mut _immediate){
        disasm_debug!("is_pcrel_opcode = true 0x{:x}", _immediate);
        immedate_size = _instr.size.address;
        is_pcrel_opcode = true;
    }

    disasm_debug!("imm size {}", immedate_size);
    // Set the immediate
    build_immediate(
        _detail,
        _nmemonic,
        _immediate as i64,
        immedate_size,
        &_instr.mode,
        true,
        is_pcrel_opcode);
    return true;
}

pub fn build_rm_register<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _operand_pair: &OperandSetPair,
    _instr: &Instructionx86)->bool
{
    disasm_debug!("build_rm_register()");
    match _instr.mod_rm{
        Some(ref rm)=>{
            disasm_debug!("rm.base_ea {}", rm.base_ea);
            if (rm.base_ea_reg < EABases::Max as u16) && (rm.base_ea == EABases::Sib as u16 || rm.base_ea == EABases::Sib64 as u16){
                disasm_debug!("\tA R/M register operand may not have a SIB byte");
                return false
            }
            match rm.base_ea{
                r if r == Registersx86::NoRegister as u16=>{ return false; },
                1..=260=>{                    
                    match rm.kind {
                        RegType::AllRegisters=>{
                            let offset = rm.base_ea;
                            build_register(
                                _detail, 
                                _nmemonic,
                                AllRegisters::translate(offset as u8),
                                _instr.operand_size as u8);
                        },
                        RegType::EABases=>{
                            build_register(
                                _detail, 
                                _nmemonic,
                                EABases::translate(rm.base_ea as u8),
                                _instr.operand_size as u8);
                        },
                    }
                },
                _=>{
                    disasm_debug!("\tUnexpected EA base register");
                    return false
                },
            }
        },
        None=>{},
    }
    return true;
}

pub fn build_rm_memory<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _operand_pair: &OperandSetPair,
    _instr: &Instructionx86)->bool
{
    disasm_debug!("build_rm_memory()");
    let mut _segment_reg: u8 = 0;
    let mut _base_reg: u8 = 0;
    let mut _index_reg: u8 = 0;
    let mut _offset_imm: i64 = 0;
    let mut _scale_imm: i32 = 0;

    match _instr.mod_rm{
        Some(ref rm)=>{        
            if rm.base_ea == EABases::Sib as u16 || rm.base_ea == EABases::Sib64 as u16{
                match rm.sib{
                    Some(ref sib)=>{
                        if sib.sib_base != Registersx86::NoRegister as u8{
                            match sib.sib_base{
                                1..=211=>{ // All Registers
                                    _base_reg = AllRegisters::translate(sib.sib_base);                                    
                                }
                                _=>{ 
                                    disasm_debug!("\tnot a valid register");
                                    return false;
                                }
                            }
                        } 
                        let opcode = _instr.instr_index as u32;
                        let is_index_128 = match opcode{
                            o if o == VInstructionsx86::VGATHERDPDrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERDPDYrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERQPDrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERDPSrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERQPSrm  as u32=>true,
                            o if o == VInstructionsx86::VPGATHERDQrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERDQYrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERQQrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERDDrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERQDrm as u32=>true,
                            _=>false,
                        };
                        let is_index_256 = match opcode{
                            o if o == VInstructionsx86::VGATHERQPDYrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERDPSYrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERQPSYrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERDPDZrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERDQZrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERQQYrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERDDYrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERQDYrm as u32=>true,
                            _=>false,
                        };
                        let is_index_512 = match opcode{
                            o if o == VInstructionsx86::VGATHERQPDZrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERDPSZrm as u32=>true,
                            o if o == VInstructionsx86::VGATHERQPSZrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERQQZrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERDDZrm as u32=>true,
                            o if o == VInstructionsx86::VPGATHERQDZrm as u32=>true,
                            _=>false,
                        };
                        let mut sib_index = sib.sib_index;

                        if is_index_128 || is_index_256 || is_index_512{
                            let index_reg = match _instr.size.address == 8 { true=>SibIndexes::RAX as u8, false=>SibIndexes::EAX as u8};
                            let index_offset = sib_index - index_reg;
                            let mut _index_base = 0;
                            if is_index_512 {
                                _index_base = SibIndexes::ZMM0 as u8;
                            } else if is_index_256 {
                                _index_base = SibIndexes::YMM0 as u8;
                            }
                            else {
                                _index_base = SibIndexes::XMM0 as u8;
                            }
                            
                            sib_index = _index_base + match sib_index{ 0=>4, _=>index_offset};
                        }
                        _index_reg = SibIndexes::translate(sib_index);
                        _scale_imm = sib.sib_scale as i32;
                    },
                    None=>{},
                }
            } else 
            {
                match rm.base_ea{
                    0=>{
                        if rm.displacement_ea == EADisplacement::Size0 {
                            disasm_debug!("\tdisplacement_ea is 0");
                            return false; 
                        }
                        if _instr.mode == Modex86::Mode64 {
                            if _instr.prefix.prefix_flags & PrefixMaskx86::ADDRSize as u32 != 0{
                                _base_reg = Registersx86::EIP as u8;
                                
                            } else {
                               _base_reg = Registersx86::RIP as u8; 
                            }
                        }
                        _index_reg = 0;
                    },
                    b if b == EABases::BXSI as u16=>{
                        _base_reg = EABases::translate(rm.base_ea as u8);
                        _index_reg = Registersx86::SI as u8;
                    },
                    b if b == EABases::BXDI as u16=>{
                        _base_reg = EABases::translate(rm.base_ea as u8);
                        _index_reg = Registersx86::DI as u8;
                    },
                    b if b == EABases::BPSI as u16=>{
                        _base_reg = EABases::translate(rm.base_ea as u8);
                        _index_reg = Registersx86::SI as u8;
                    },
                    b if b == EABases::BPDI as u16=>{
                        _base_reg = EABases::translate(rm.base_ea as u8);
                        _index_reg = Registersx86::DI as u8;
                    },
                    _=>{
                        _index_reg = 0;
                        match _operand_pair.encoding{
                            OperandEncodingx86::ENCODINGRM |
                            OperandEncodingx86::ENCODINGRMCD2 |
                            OperandEncodingx86::ENCODINGRMCD4 |
                            OperandEncodingx86::ENCODINGRMCD8 |
                            OperandEncodingx86::ENCODINGRMCD16 |
                            OperandEncodingx86::ENCODINGRMCD32 |
                            OperandEncodingx86::ENCODINGRMCD64 =>{
                                _base_reg = EABases::translate(rm.base_ea as u8);
                            },
                            _=>{ 
                                disasm_debug!("\tnot a valid EABase");
                                return false; 
                            },
                        }
                    },
                }
                _scale_imm=1;
            }
            _segment_reg = _instr.prefix.segment;

            match rm.displacement{
                Some(ref disp)=>{  
                    _offset_imm = disp.data as i64;
                },
                None=>{},
            }

            let operand_size: u8 = match _operand_pair.encodetype{
                OperandTypex86::TYPEM8=>1,
                OperandTypex86::TYPEM16=>2,
                OperandTypex86::TYPEM32=>4,
                OperandTypex86::TYPEM64=>8,
                OperandTypex86::TYPEM128=>16,
                OperandTypex86::TYPEM256=>32,
                OperandTypex86::TYPEM512=>64,
                OperandTypex86::TYPEM32FP=>4,
                OperandTypex86::TYPEM64FP=>8,
                OperandTypex86::TYPEM80FP=>10,
                OperandTypex86::TYPEM16INT=>2,
                OperandTypex86::TYPEM32INT=>4,
                OperandTypex86::TYPEM64INT=>8,
                OperandTypex86::TYPEM1632=>6,
                OperandTypex86::TYPEM1664=>10,
                _=>_instr.operand_size as u8, //_instr.size.address as u8,
            };
            
            build_mem_operand(
                _detail,
                _nmemonic,
                _segment_reg,
                _base_reg,
                _index_reg,
                _offset_imm,
                _scale_imm,
                operand_size);
        },
        None=>{},
    }
    return true;
}

pub fn build_rm<T: ArchDetail>(
    _detail: &mut T,
    _nmemonic: &mut String,
    _operand_pair: &OperandSetPair,
    _instr: &Instructionx86)->bool
{
    disasm_debug!("build_rm()");
    match _operand_pair.encodetype{
        OperandTypex86::TYPER8 |
        OperandTypex86::TYPER16 |
        OperandTypex86::TYPER32 |
        OperandTypex86::TYPER64 |
        OperandTypex86::TYPERv |
        OperandTypex86::TYPEMM |
        OperandTypex86::TYPEMM32 |
        OperandTypex86::TYPEMM64 |
        OperandTypex86::TYPEXMM |
        OperandTypex86::TYPEXMM32 |
        OperandTypex86::TYPEXMM64 |
        OperandTypex86::TYPEXMM128 |
        OperandTypex86::TYPEXMM256 |
        OperandTypex86::TYPEXMM512 |
        OperandTypex86::TYPEVK1 |
        OperandTypex86::TYPEVK8 |
        OperandTypex86::TYPEVK16 |
        OperandTypex86::TYPEDEBUGREG |
        OperandTypex86::TYPECONTROLREG =>{
            if !build_rm_register(
                _detail, 
                _nmemonic,
                _operand_pair, 
                _instr)
            { 
                disasm_debug!("\tbuild_rm_register failed");
                return false; 
            }
        }
        OperandTypex86::TYPEM |
        OperandTypex86::TYPEM8 |
        OperandTypex86::TYPEM16 |
        OperandTypex86::TYPEM32 |
        OperandTypex86::TYPEM64 |
        OperandTypex86::TYPEM128 |
        OperandTypex86::TYPEM256 |
        OperandTypex86::TYPEM512 |
        OperandTypex86::TYPEMv |
        OperandTypex86::TYPEM32FP |
        OperandTypex86::TYPEM64FP |
        OperandTypex86::TYPEM80FP |
        OperandTypex86::TYPEM16INT |
        OperandTypex86::TYPEM32INT |
        OperandTypex86::TYPEM64INT |
        OperandTypex86::TYPEM1616 |
        OperandTypex86::TYPEM1632 |
        OperandTypex86::TYPEM1664 |
        OperandTypex86::TYPELEA=>{
            if !build_rm_memory(
                _detail, 
                _nmemonic,
                _operand_pair, 
                _instr)
            { 
                disasm_debug!("\tbuild_rm_memory failed");
                return false; 
            }
        }
        _=>{ return false; },
    }
    return true;
}

pub fn build_operand<T: ArchDetail + Debug>(
    _instr: &Instructionx86,
    _operand_pair: &OperandSetPair,
    _op_index: &mut usize,
    _instr_ext: &mut Instruction<T>,
    _immediates_translated: &mut usize,
    )->bool
{
    disasm_debug!("build_operand()");
    match _operand_pair.encoding{
        OperandEncodingx86::ENCODINGREG =>{
            match _instr.register{
                Some(ref reg)=>{
                    build_register(
                        &mut _instr_ext.detail, 
                        &mut _instr_ext.op_str,
                        AllRegisters::translate(reg.data),
                        _instr.operand_size as u8);
                    match _instr.operands
                    {
                        Some(ref operands)=>{
                            if operands[*_op_index+1].encoding != OperandEncodingx86::ENCODINGNONE{ 
                                _instr_ext.op_str= format!("{}, ", _instr_ext.op_str);
                            }
                        }
                        None=>{},
                    }
                },
                None=>{ return false },
            }
        },
        OperandEncodingx86::ENCODINGWRITEMASK =>{
            match _instr.register{
                Some(ref reg)=>{
                    if reg.mask >= 8 {
                        return false;
                    }
                    build_register(
                        &mut _instr_ext.detail, 
                        &mut _instr_ext.op_str,
                        AllRegisters::translate(AllRegisters::K0 as u8 + reg.mask),
                        _instr.operand_size as u8);
                },
                None=>{ return false },
            }
        },
        OperandEncodingx86::ENCODINGRM |
        OperandEncodingx86::ENCODINGRMCD2 |
        OperandEncodingx86::ENCODINGRMCD4 |
        OperandEncodingx86::ENCODINGRMCD8 |
        OperandEncodingx86::ENCODINGRMCD16 |
        OperandEncodingx86::ENCODINGRMCD32 |
        OperandEncodingx86::ENCODINGRMCD64 =>{
            if !build_rm(
                &mut _instr_ext.detail,
                &mut _instr_ext.op_str,
                _operand_pair,
                _instr)
            {
                disasm_debug!("\tbuild_rm failed");
                return false;
            }
            match _instr.operands
            {
                Some(ref operands)=>{
                    if operands[*_op_index+1].encoding != OperandEncodingx86::ENCODINGNONE{ 
                        _instr_ext.op_str= format!("{}, ", _instr_ext.op_str);
                    }
                },
                None=>{}
            }
        },
        OperandEncodingx86::ENCODINGCB |
        OperandEncodingx86::ENCODINGCW |
        OperandEncodingx86::ENCODINGCD |
        OperandEncodingx86::ENCODINGCP |
        OperandEncodingx86::ENCODINGCO |
        OperandEncodingx86::ENCODINGCT =>{
            return true;
        },
        OperandEncodingx86::ENCODINGIB |
        OperandEncodingx86::ENCODINGIW |
        OperandEncodingx86::ENCODINGID |
        OperandEncodingx86::ENCODINGIO |
        OperandEncodingx86::ENCODINGIv |
        OperandEncodingx86::ENCODINGIa =>{
            match _instr.immediates{
                Some(ref imm)=>{
                    if *_immediates_translated < imm.count as usize{
                        let immediate = imm.data[*_immediates_translated];
                        if !build_immediates(
                            &mut _instr_ext.detail,
                            &mut _instr_ext.op_str,
                            immediate, 
                            _operand_pair,
                            _instr)
                        {
                            disasm_debug!("\tbuild_immediates failed");
                            return false;
                        }
                        *_immediates_translated+=1;
                    }
                }
                None=>{ return false },
            }
        },
        OperandEncodingx86::ENCODINGSI =>{
            let base_reg: u8;
            if _instr.mode == Modex86::Mode64{
                if _instr.prefix.prefix_flags & PrefixMaskx86::ADDRSize as u32 != 0{
                    base_reg = Registersx86::ESI as u8; 
                } else {
                    base_reg = Registersx86::RSI as u8; 
                }
            } else if _instr.mode == Modex86::Mode32{
                if _instr.prefix.prefix_flags & PrefixMaskx86::ADDRSize as u32 != 0{
                    base_reg = Registersx86::SI as u8; 
                } else {
                    base_reg = Registersx86::ESI as u8; 
                }
            } else {
                if _instr.prefix.prefix_flags & PrefixMaskx86::ADDRSize as u32 != 0{
                    base_reg = Registersx86::ESI as u8; 
                } else {
                    base_reg = Registersx86::SI as u8; 
                }
            }
            let operand_size: u8 = match _operand_pair.encodetype{
                OperandTypex86::TYPESRCIDX8=>1,
                OperandTypex86::TYPESRCIDX16=>2,
                OperandTypex86::TYPESRCIDX32=>4,
                OperandTypex86::TYPESRCIDX64=>8,
                _=>_instr.operand_size as u8,
            };
            disasm_debug!("\tENCODINGSI");
            build_src_mem_operand(
                &mut _instr_ext.detail,
                &mut _instr_ext.op_str,
                &_instr_ext.opcode,
                _instr.prefix.segment, // segment
                base_reg,
                0,
                0,
                0,
                operand_size);
        },
        OperandEncodingx86::ENCODINGDI =>{
            let base_reg: u8;
            if _instr.mode == Modex86::Mode64{
                if _instr.prefix.prefix_flags & PrefixMaskx86::ADDRSize as u32 != 0{
                    base_reg = Registersx86::EDI as u8; 
                } else {
                    base_reg = Registersx86::RDI as u8; 
                }
            } else if _instr.mode == Modex86::Mode32{
                if _instr.prefix.prefix_flags & PrefixMaskx86::ADDRSize as u32 != 0{
                    base_reg = Registersx86::DI as u8; 
                } else {
                    base_reg = Registersx86::EDI as u8; 
                }
            } else {
                if _instr.prefix.prefix_flags & PrefixMaskx86::ADDRSize as u32 != 0{
                    base_reg = Registersx86::EDI as u8; 
                } else {
                    base_reg = Registersx86::DI as u8; 
                }
            }
            disasm_debug!("\tENCODINGDI");
            let operand_size: u8 = match _operand_pair.encodetype{
                OperandTypex86::TYPEDSTIDX8=>1,
                OperandTypex86::TYPEDSTIDX16=>2,
                OperandTypex86::TYPEDSTIDX32=>4,
                OperandTypex86::TYPEDSTIDX64=>8,
                _=>_instr.operand_size as u8,
            };
            match _instr.mode{
                Modex86::Mode64=>{
                    build_mem_operand(
                        &mut _instr_ext.detail,
                        &mut _instr_ext.op_str,
                        0, // segment
                        base_reg,
                        0,
                        0,
                        0,
                        operand_size);
                },
                _=>{
                    build_mem_operand(
                        &mut _instr_ext.detail,
                        &mut _instr_ext.op_str,
                        Registersx86::ES as u8, // segment
                        base_reg,
                        0,
                        0,
                        0,
                        operand_size);
                },
            }
            match _instr.operands
            {
                Some(ref operands)=>{
                    if operands[*_op_index+1].encoding != OperandEncodingx86::ENCODINGNONE{ 
                        _instr_ext.op_str= format!("{}, ", _instr_ext.op_str);
                    }
                },
                None=>{}
            }
        },
        OperandEncodingx86::ENCODINGRB |
        OperandEncodingx86::ENCODINGRW |
        OperandEncodingx86::ENCODINGRD |
        OperandEncodingx86::ENCODINGRO |
        OperandEncodingx86::ENCODINGRv =>{
            match _instr.register{
                Some(ref reg)=>{
                    build_register(
                        &mut _instr_ext.detail, 
                        &mut _instr_ext.op_str,
                        AllRegisters::translate(reg.opcode_data),
                        _instr.operand_size as u8);
                    match _instr.operands
                    {
                        Some(ref operands)=>{
                            if operands[*_op_index+1].encoding != OperandEncodingx86::ENCODINGNONE{ 
                                _instr_ext.op_str= format!("{}, ", _instr_ext.op_str);
                            }
                        },
                        None=>{},
                    }
                    
                },
                None=>{ return false },
            }
        },
        OperandEncodingx86::ENCODINGFP =>{
            match _instr.mod_rm{
                Some(ref rm)=>{
                    let stack_pos =  Registersx86::ST0 as u16 + (rm.data & 7);
                    build_register(
                        &mut _instr_ext.detail, 
                        &mut _instr_ext.op_str,
                        stack_pos as u8,
                        _instr.operand_size as u8);
                }
                None=>{ return false },
            }
        },
        OperandEncodingx86::ENCODINGVVVV =>{
            match _instr.register{
                Some(ref reg)=>{
                    build_register(
                        &mut _instr_ext.detail, 
                        &mut _instr_ext.op_str,
                        AllRegisters::translate(reg.vvvv),
                        _instr.operand_size as u8);
                    match _instr.operands
                    {
                        Some(ref operands)=>{
                            if operands[*_op_index+1].encoding != OperandEncodingx86::ENCODINGNONE{ 
                                _instr_ext.op_str= format!("{}, ", _instr_ext.op_str);
                            }
                        },
                        None=>{},
                    }
                },
                None=>{ return false },
            }
        },
        OperandEncodingx86::ENCODINGDUP =>{
            disasm_debug!("\tDuplicate operand");
            match _instr.operands{
                Some(ref op)=>{
                    *_op_index+=1;
                    return build_operand(
                        _instr,
                        &op[*_op_index],
                        _op_index,
                        _instr_ext,
                        _immediates_translated);
                },
                None=>{ return false },
            }
        },
        _=>{},
    }
    return true;
}

fn check_bnd(_opcode: &u32) -> bool{
    match *_opcode {
        o if o == Instructionsx86::JAE1 as u32=>return true,
        o if o == Instructionsx86::JAE2 as u32=>return true,
        o if o == Instructionsx86::JAE4 as u32=>return true,
        o if o == Instructionsx86::JA1 as u32=>return true,
        o if o == Instructionsx86::JA2 as u32=>return true,
        o if o == Instructionsx86::JA4 as u32=>return true,
        o if o == Instructionsx86::JBE1 as u32=>return true,
        o if o == Instructionsx86::JBE2 as u32=>return true,
        o if o == Instructionsx86::JBE4 as u32=>return true,
        o if o == Instructionsx86::JB1 as u32=>return true,
        o if o == Instructionsx86::JB2 as u32=>return true,
        o if o == Instructionsx86::JB4 as u32=>return true,
        o if o == Instructionsx86::JCXZ as u32=>return true,
        o if o == Instructionsx86::JECXZ32 as u32=>return true,
        o if o == Instructionsx86::JECXZ64 as u32=>return true,
        o if o == Instructionsx86::JE1 as u32=>return true,
        o if o == Instructionsx86::JE2 as u32=>return true,
        o if o == Instructionsx86::JE4 as u32=>return true,
        o if o == Instructionsx86::JGE1 as u32=>return true,
        o if o == Instructionsx86::JGE2 as u32=>return true,
        o if o == Instructionsx86::JGE4 as u32=>return true,
        o if o == Instructionsx86::JG1 as u32=>return true,
        o if o == Instructionsx86::JG2 as u32=>return true,
        o if o == Instructionsx86::JG4 as u32=>return true,
        o if o == Instructionsx86::JLE1 as u32=>return true,
        o if o == Instructionsx86::JLE2 as u32=>return true,
        o if o == Instructionsx86::JLE4 as u32=>return true,
        o if o == Instructionsx86::JL1 as u32=>return true,
        o if o == Instructionsx86::JL2 as u32=>return true,
        o if o == Instructionsx86::JL4 as u32=>return true,
        o if o == Instructionsx86::JMP16m as u32=>return true,
        o if o == Instructionsx86::JMP16r as u32=>return true,
        o if o == Instructionsx86::JMP32m as u32=>return true,
        o if o == Instructionsx86::JMP32r as u32=>return true,
        o if o == Instructionsx86::JMP64m as u32=>return true,
        o if o == Instructionsx86::JMP64r as u32=>return true,
        o if o == Instructionsx86::JMP1 as u32=>return true,
        o if o == Instructionsx86::JMP2 as u32=>return true,
        o if o == Instructionsx86::JMP4 as u32=>return true,
        o if o == Instructionsx86::JNE1 as u32=>return true,
        o if o == Instructionsx86::JNE2 as u32=>return true,
        o if o == Instructionsx86::JNE4 as u32=>return true,
        o if o == Instructionsx86::JNO1 as u32=>return true,
        o if o == Instructionsx86::JNO2 as u32=>return true,
        o if o == Instructionsx86::JNO4 as u32=>return true,
        o if o == Instructionsx86::JNP1 as u32=>return true,
        o if o == Instructionsx86::JNP2 as u32=>return true,
        o if o == Instructionsx86::JNP4 as u32=>return true,
        o if o == Instructionsx86::JNS1 as u32=>return true,
        o if o == Instructionsx86::JNS2 as u32=>return true,
        o if o == Instructionsx86::JNS4 as u32=>return true,
        o if o == Instructionsx86::JO1 as u32=>return true,
        o if o == Instructionsx86::JO2 as u32=>return true,
        o if o == Instructionsx86::JO4 as u32=>return true,
        o if o == Instructionsx86::JP1 as u32=>return true,
        o if o == Instructionsx86::JP2 as u32=>return true,
        o if o == Instructionsx86::JP4 as u32=>return true,
        o if o == Instructionsx86::JRCXZ as u32=>return true,
        o if o == Instructionsx86::JS1 as u32=>return true,
        o if o == Instructionsx86::JS2 as u32=>return true,
        o if o == Instructionsx86::JS4 as u32=>return true,
        o if o == Instructionsx86::CALL16m as u32=>return true,
        o if o == Instructionsx86::CALL16r as u32=>return true,
        o if o == Instructionsx86::CALL32m as u32=>return true,
        o if o == Instructionsx86::CALL32r as u32=>return true,
        o if o == Instructionsx86::CALL64m as u32=>return true,
        o if o == Instructionsx86::CALL64pcrel32 as u32=>return true,
        o if o == Instructionsx86::CALL64r as u32=>return true,
        o if o == Instructionsx86::CALLpcrel16 as u32=>return true,
        o if o == Instructionsx86::CALLpcrel32 as u32=>return true,
        o if o == Instructionsx86::RETIL as u32=>return true,
        o if o == Instructionsx86::RETIQ as u32=>return true,
        o if o == Instructionsx86::RETIW as u32=>return true,
        o if o == Instructionsx86::RETL as u32=>return true,
        o if o == Instructionsx86::RETQ as u32=>return true,
        o if o == Instructionsx86::RETW as u32=>return true,
        o if o == Instructionsx86::LRETIL as u32=>return true,
        o if o == Instructionsx86::LRETIQ as u32=>return true,
        o if o == Instructionsx86::LRETIW as u32=>return true,
        o if o == Instructionsx86::LRETL as u32=>return true,
        o if o == Instructionsx86::LRETQ as u32=>return true,
        o if o == Instructionsx86::LRETW as u32=>return true,
        _=>return false,
    }
}

fn check_rep(_opcode: &u32) -> bool{
    match *_opcode {
        o if o == Instructionsx86::MOVSB as u32=>return true,
        o if o == Instructionsx86::MOVSL as u32=>return true,
        o if o == Instructionsx86::MOVSQ as u32=>return true,
        o if o == Instructionsx86::MOVSW as u32=>return true,
        o if o == Instructionsx86::OUTSB as u32=>return true,
        o if o == Instructionsx86::OUTSL as u32=>return true,
        o if o == Instructionsx86::OUTSW as u32=>return true,
        o if o == Instructionsx86::STOSB as u32=>return true,
        o if o == Instructionsx86::STOSL as u32=>return true,
        o if o == Instructionsx86::STOSQ as u32=>return true,
        o if o == Instructionsx86::STOSW as u32=>return true,
        o if o == Instructionsx86::INSB as u32=>return true,
        o if o == Instructionsx86::INSL as u32=>return true,
        o if o == Instructionsx86::INSW as u32=>return true,
        o if o == Instructionsx86::LODSB as u32=>return true,
        o if o == Instructionsx86::LODSL as u32=>return true,
        o if o == Instructionsx86::LODSQ as u32=>return true,
        o if o == Instructionsx86::LODSW as u32=>return true,
        o if o == Instructionsx86::MOVSL as u32=>return true,
        o if o == Instructionsx86::LODSL as u32=>return true,
        o if o == Instructionsx86::STOSL as u32=>return true,
        _=>return false,
    }
}

fn check_repz(_opcode: &u32) -> bool{
    match *_opcode {
        o if o == Instructionsx86::CMPSB as u32=>return true,
        o if o == Instructionsx86::CMPSQ as u32=>return true,
        o if o == Instructionsx86::CMPSW as u32=>return true,
        o if o == Instructionsx86::SCASB as u32=>return true,
        o if o == Instructionsx86::SCASQ as u32=>return true,
        o if o == Instructionsx86::SCASW as u32=>return true,
        o if o == Instructionsx86::CMPSL as u32=>return true,
        o if o == Instructionsx86::SCASL as u32=>return true,
        _=>return false,
    }
}

fn check_repnz(_opcode: &u32) -> bool{
    match *_opcode {
        o if o == Instructionsx86::CMPSB as u32=>return true,
        o if o == Instructionsx86::CMPSQ as u32=>return true,
        o if o == Instructionsx86::CMPSW as u32=>return true,
        o if o == Instructionsx86::SCASB as u32=>return true,
        o if o == Instructionsx86::SCASQ as u32=>return true,
        o if o == Instructionsx86::SCASW as u32=>return true,
        o if o == Instructionsx86::CMPSL as u32=>return true,
        o if o == Instructionsx86::SCASL as u32=>return true,
        o if o == Instructionsx86::MOVSB as u32=>return true,
        o if o == Instructionsx86::MOVSDmr as u32=>return true,
        o if o == Instructionsx86::MOVSDrm as u32=>return true,
        o if o == Instructionsx86::MOVSDrr as u32=>return true,
        o if o == Instructionsx86::MOVSDrrREV as u32=>return true,
        o if o == Instructionsx86::MOVSL as u32=>return true,
        o if o == Instructionsx86::MOVSQ as u32=>return true,
        o if o == Instructionsx86::MOVSW as u32=>return true,
        o if o == Instructionsx86::LODSB as u32=>return true,
        o if o == Instructionsx86::LODSL as u32=>return true,
        o if o == Instructionsx86::LODSQ as u32=>return true,
        o if o == Instructionsx86::LODSW as u32=>return true,
        o if o == Instructionsx86::INSB as u32=>return true,
        o if o == Instructionsx86::INSL as u32=>return true,
        o if o == Instructionsx86::INSW as u32=>return true,
        o if o == Instructionsx86::OUTSB as u32=>return true,
        o if o == Instructionsx86::OUTSL as u32=>return true,
        o if o == Instructionsx86::OUTSW as u32=>return true,
        o if o == Instructionsx86::STOSB as u32=>return true,
        o if o == Instructionsx86::STOSL as u32=>return true,
        o if o == Instructionsx86::STOSQ as u32=>return true,
        o if o == Instructionsx86::STOSW as u32=>return true,
        _=>return false,
    }
}

fn print_prefix(
    _nmemonic: &mut String,
    _prefix: &u8,
    _opcode: &u32)
{
    disasm_debug!("print_prefix()");
    match *_prefix{
        0xF0 =>{ /* Lock */
            *_nmemonic = format!("lock {}", *_nmemonic);
        },
        0xF2 =>{ /* REPNE/REPNZ */
            if check_repnz(_opcode){
                *_nmemonic = format!("repnz {}", *_nmemonic);
            } else if check_bnd(_opcode){
                *_nmemonic = format!("bnd {}", *_nmemonic);
            }
        },
        0xF3 =>{ /* REP or REPE/REPZ */
            if check_rep(_opcode){
                *_nmemonic = format!("rep {}", *_nmemonic);
            } else if check_repz(_opcode){
                *_nmemonic = format!("repz {}", *_nmemonic);
            }
        },
        _=>{},
    }
}

pub fn build_instruction<T: ArchDetail + Debug>(
    _instr_int: &Instructionx86,
    _instr_ext: &mut Instruction<T>,
    ) -> bool
{
    disasm_debug!("build_instruction()");
    if _instr_int.instr_spec.is_none() {
        disasm_debug!("_instr_int.instr_spec is 0");
        return false;
    }

    // Set Opcode
    _instr_ext.opcode = _instr_int.instr_index as u32;
    // print mnemonic
    let opcode = print_opcode(_instr_ext.opcode as usize);
    _instr_ext.mnemonic.push_str(opcode);
    // address
    _instr_ext.address = _instr_int.start;
    // size
    _instr_ext.size = _instr_int.length;

    // detail:
    // prefix
    let mut prefix = _instr_int.prefix.location;
    prefix.sort();
    let mut count = 0;
    for i in ::num::iter::range(0, prefix.len()){
        if prefix[i] > 0{
            let _prefix = _instr_int.cinfo.code[(prefix[i]-_instr_int.cinfo.address) as usize];
            _instr_ext.detail.prefix()[count] = _prefix;
            print_prefix(
                &mut _instr_ext.mnemonic,
                &_prefix,
                &_instr_ext.opcode);
            count+=1;
        }
    }
    // opcode
    if _instr_int.prefix.vex_type != VexExType::NoXop{
        *_instr_ext.detail.opcode() = _instr_int.prefix.vex_prefix;
    }
    else {
        if _instr_int.opcode.escape_byte2 != 0{
            if _instr_int.opcode.escape_byte3 != 0 {
                _instr_ext.detail.opcode()[0] = _instr_int.opcode.escape_byte2;
                _instr_ext.detail.opcode()[1] = _instr_int.opcode.escape_byte3;
                _instr_ext.detail.opcode()[2] = _instr_int.opcode.data[(_instr_int.opcode.size-1) as usize];

            } else {
                _instr_ext.detail.opcode()[0] = _instr_int.opcode.escape_byte2;
                _instr_ext.detail.opcode()[1] = _instr_int.opcode.data[(_instr_int.opcode.size-1) as usize];
            }

        } else {
            *_instr_ext.detail.opcode() = _instr_int.opcode.data;
        }
    }
    // rex
    *_instr_ext.detail.rex() = _instr_int.prefix.kind[PrefixMaskx86::Rex as usize];
    // address_size
    *_instr_ext.detail.address_size() = _instr_int.size.address;
    // mod_rm
    match _instr_int.mod_rm{
        Some(ref rm)=>{
            *_instr_ext.detail.mod_rm() = rm.data as u8;
            match rm.sib{
                Some(ref s)=>{
                    *_instr_ext.detail.sib() = s.data;
                    *_instr_ext.detail.sib_index() = s.sib_index as u16;
                    *_instr_ext.detail.sib_scale() = s.sib_scale;
                    *_instr_ext.detail.sib_base() = s.sib_base as u16;
                },
                None=>{},
            }
            match rm.displacement{
                Some(ref disp)=>{
                    *_instr_ext.detail.displacement() = disp.data;
                },
                None=>{},
            }
        }
        None=>{},
    }
    // handle xAcquireRelease
    if _instr_int.prefix.x_acquire_release {
        if _instr_ext.opcode == Instructionsx86::REPPREFIX as u32{
            _instr_ext.opcode = Instructionsx86::XRELEASEPREFIX as u32;
        }
        else if _instr_ext.opcode == Instructionsx86::REPNEPREFIX as u32{
            _instr_ext.opcode = Instructionsx86::XACQUIREPREFIX as u32;
        }
    }

    // TODO: AVX Special Cases

    // first operand
    let first_operand = DISASMX86_FIRST_OP_MAP[_instr_ext.opcode as usize];
    if first_operand != 0 {
        disasm_debug!("adding first operand");
        build_register(
            &mut _instr_ext.detail, 
            &mut _instr_ext.op_str,
            first_operand,
            _instr_int.operand_size as u8);
        match _instr_int.operands
        {
            Some(ref operands)=>{
                if operands[0].encoding != OperandEncodingx86::ENCODINGNONE
                { 
                    _instr_ext.op_str= format!("{}, ", _instr_ext.op_str);
                }
            }
            None=>{},
        }
    }
    // operands
    let mut immediates_translated: usize = 0;
    if _instr_int.operands.is_some(){
        let mut index: usize = 0;
        while index < 6 {
            match _instr_int.operands
            {
                Some(ref operands)=>{
                    if !build_operand(
                        _instr_int,
                        &operands[index], 
                        &mut index,
                        _instr_ext,
                        &mut immediates_translated)
                    {
                        return false;
                    }
                },
                None=>{},
            }
            index+=1;
        }
    }
    // check printing opcode
    if *_instr_ext.detail.printing_opcode() != 0 {
        let opcode = print_opcode(*_instr_ext.detail.printing_opcode() as usize);
        _instr_ext.mnemonic.clear();
        _instr_ext.mnemonic.push_str(opcode);
    }

    // last operand
    let last_operand = DISASMX86_LAST_OP_MAP[_instr_ext.opcode as usize];

    if last_operand != 0 && first_operand == 0 {
        _instr_ext.op_str= format!("{}, ", _instr_ext.op_str);
        disasm_debug!("adding last operand");
        build_register(
            &mut _instr_ext.detail, 
            &mut _instr_ext.op_str,
            last_operand,
            _instr_int.operand_size as u8);
        
    }

    // bytes
    let mut cursor = (_instr_int.cinfo.offset - _instr_int.cinfo.address) as usize;
    let mut index = 0;
    let mut size = cursor + _instr_int.length as usize;
    if size > _instr_int.cinfo.size{
        size = _instr_int.cinfo.size;
    }
    while cursor < size && index < _instr_ext.bytes.len(){
        _instr_ext.bytes[index] = _instr_int.cinfo.code[cursor];
        index+=1;
        cursor+=1;
    }
    return true;
}
